/**
 * MBTI 테스트 전체 플로우 E2E 테스트
 * 사용자가 MBTI 테스트를 완료하는 전체 과정을 테스트합니다.
 */

import { test, expect } from '@playwright/test';

test.describe('MBTI 테스트 플로우', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/');
  });

  test('홈페이지에서 MBTI 테스트로 이동', async ({ page }) => {
    // MBTI 카드 찾기 및 클릭
    const mbtiCard = page.locator('.service-card, .test-card').filter({ hasText: /MBTI|성격.*테스트/ });
    await expect(mbtiCard).toBeVisible();
    
    await mbtiCard.click();
    
    // MBTI 소개 페이지 또는 직접 테스트 페이지로 이동 확인
    await expect(page).toHaveURL(/mbti/);
    await expect(page.locator('h1')).toContainText(/MBTI|성격.*테스트/);
  });

  test('MBTI 테스트 소개 페이지에서 테스트 시작', async ({ page }) => {
    await page.goto('/tests/mbti/');
    
    // 소개 내용 확인
    await expect(page.locator('h1')).toContainText(/MBTI|성격.*테스트/);
    
    const description = page.locator('.test-description, .intro-text, p');
    await expect(description).toContainText(/16.*성격|성격.*유형|테스트/);
    
    // 테스트 시작 버튼 클릭
    const startButton = page.locator('button, a').filter({ hasText: /시작|테스트.*시작|Start/ });
    await expect(startButton).toBeVisible();
    await startButton.click();
    
    // 테스트 페이지로 이동 확인
    await expect(page).toHaveURL(/test|question/);
  });

  test('사용자 정보 입력 단계', async ({ page }) => {
    await page.goto('/tests/mbti/test.html');
    
    // 사용자 정보 폼이 있는 경우 처리
    const nameInput = page.locator('input[name="name"], input[placeholder*="이름"], #name');
    if (await nameInput.isVisible()) {
      await nameInput.fill('김테스트');
      
      const ageInput = page.locator('input[name="age"], input[placeholder*="나이"], #age');
      if (await ageInput.isVisible()) {
        await ageInput.fill('25');
      }
      
      const genderSelect = page.locator('select[name="gender"], input[name="gender"]');
      if (await genderSelect.isVisible()) {\n        if (await genderSelect.locator('option').first().isVisible()) {\n          await genderSelect.selectOption('female');\n        } else {\n          // 라디오 버튼인 경우\n          await page.check('input[name=\"gender\"][value=\"female\"]');\n        }\n      }\n      \n      const nextButton = page.locator('button').filter({ hasText: /다음|시작|Next/ });\n      await nextButton.click();\n    }\n  });\n\n  test('MBTI 질문에 순차적으로 답변', async ({ page }) => {\n    await page.goto('/tests/mbti/test.html');\n    \n    // 첫 번째 질문 확인\n    const questionTitle = page.locator('.question-title, .question h2, h2');\n    await expect(questionTitle).toBeVisible();\n    \n    const progressIndicator = page.locator('.progress, .step-indicator');\n    if (await progressIndicator.isVisible()) {\n      await expect(progressIndicator).toContainText(/1|첫/);\n    }\n    \n    // 20-30개의 질문에 답변 (실제 MBTI 테스트 길이)\n    const maxQuestions = 25;\n    let currentQuestion = 1;\n    \n    while (currentQuestion <= maxQuestions) {\n      // 현재 질문 확인\n      const question = page.locator('.question, .question-container');\n      await expect(question).toBeVisible();\n      \n      // 답변 옵션 확인 (A/B 또는 객관식)\n      const options = page.locator('.option, .answer-option, input[type=\"radio\"], button[data-value]');\n      const optionCount = await options.count();\n      \n      if (optionCount === 0) {\n        // 질문이 더 이상 없으면 종료\n        break;\n      }\n      \n      expect(optionCount).toBeGreaterThanOrEqual(2);\n      \n      // 랜덤하게 답변 선택 (첫 번째 또는 두 번째 옵션)\n      const selectedOption = Math.random() > 0.5 ? 0 : 1;\n      const chosenOption = options.nth(selectedOption);\n      \n      // 옵션 선택\n      if (await chosenOption.getAttribute('type') === 'radio') {\n        await chosenOption.check();\n      } else {\n        await chosenOption.click();\n      }\n      \n      // 선택 확인\n      await expect(chosenOption).toBeChecked().or(expect(chosenOption).toHaveClass(/selected|active/));\n      \n      // 다음 버튼 클릭\n      const nextButton = page.locator('button').filter({ hasText: /다음|Next/ });\n      if (await nextButton.isVisible() && !await nextButton.isDisabled()) {\n        await nextButton.click();\n        \n        // 페이지 전환 대기\n        await page.waitForTimeout(500);\n        \n        // 진행률 확인\n        const progress = page.locator('.progress-fill, .progress-bar');\n        if (await progress.isVisible()) {\n          const progressWidth = await progress.getAttribute('style');\n          expect(progressWidth).toMatch(/width.*%/);\n        }\n        \n        currentQuestion++;\n      } else {\n        // 다음 버튼이 없으면 테스트 완료\n        break;\n      }\n      \n      // 무한 루프 방지\n      if (currentQuestion > maxQuestions) {\n        break;\n      }\n    }\n    \n    // 테스트 완료 후 결과 페이지로 이동 확인\n    const submitButton = page.locator('button').filter({ hasText: /완료|결과.*보기|Submit/ });\n    if (await submitButton.isVisible()) {\n      await submitButton.click();\n    }\n  });\n\n  test('MBTI 테스트 결과 페이지 확인', async ({ page }) => {\n    // 테스트를 완료한 상태로 직접 결과 페이지 접근\n    // (실제로는 위의 테스트 플로우를 거쳐야 함)\n    await page.goto('/tests/mbti/test.html');\n    \n    // 테스트 완료 후 또는 mock 데이터로 결과 표시\n    // 여기서는 결과 페이지가 로드되었다고 가정\n    \n    // 로딩 화면 확인\n    const loadingElement = page.locator('.loading, .spinner');\n    if (await loadingElement.isVisible()) {\n      await expect(loadingElement).toContainText(/분석|계산|로딩/);\n      \n      // 로딩이 완료될 때까지 대기\n      await expect(loadingElement).not.toBeVisible({ timeout: 10000 });\n    }\n    \n    // 결과 컨테이너 확인\n    const resultContainer = page.locator('.result, .test-result, .mbti-result');\n    await expect(resultContainer).toBeVisible();\n    \n    // MBTI 유형 확인 (예: ENFP, INTJ 등)\n    const mbtiType = page.locator('.mbti-type, .personality-type, .result-type');\n    await expect(mbtiType).toBeVisible();\n    await expect(mbtiType).toMatch(/^[EI][SN][TF][JP]$/);\n    \n    // 유형 이름 확인\n    const typeName = page.locator('.type-name, .personality-name, .result-title');\n    await expect(typeName).toBeVisible();\n    await expect(typeName).toContainText(/.{2,}/);\n    \n    // 설명 텍스트 확인\n    const description = page.locator('.description, .personality-description, .result-description');\n    await expect(description).toBeVisible();\n    await expect(description).toContainText(/.{50,}/);\n    \n    // 특성 목록 확인\n    const traits = page.locator('.traits li, .characteristics li, .trait-item');\n    const traitCount = await traits.count();\n    expect(traitCount).toBeGreaterThanOrEqual(3);\n    \n    // 강점 섹션 확인\n    const strengths = page.locator('.strengths, .strength-list');\n    if (await strengths.isVisible()) {\n      const strengthItems = strengths.locator('li, .strength-item');\n      const strengthCount = await strengthItems.count();\n      expect(strengthCount).toBeGreaterThan(0);\n    }\n    \n    // 약점 또는 개선점 섹션 확인\n    const weaknesses = page.locator('.weaknesses, .improvement-areas');\n    if (await weaknesses.isVisible()) {\n      const weaknessItems = weaknesses.locator('li, .weakness-item');\n      const weaknessCount = await weaknessItems.count();\n      expect(weaknessCount).toBeGreaterThan(0);\n    }\n    \n    // 추천 직업 섹션 확인\n    const careers = page.locator('.careers, .recommended-jobs');\n    if (await careers.isVisible()) {\n      const careerItems = careers.locator('li, .career-item');\n      const careerCount = await careerItems.count();\n      expect(careerCount).toBeGreaterThan(0);\n    }\n    \n    // 궁합 정보 확인\n    const compatibility = page.locator('.compatibility, .relationship-info');\n    if (await compatibility.isVisible()) {\n      await expect(compatibility).toContainText(/궁합|관계|상성/);\n    }\n  });\n\n  test('결과 공유 기능 테스트', async ({ page }) => {\n    // 결과 페이지로 이동 (mock 또는 완료된 테스트 상태)\n    await page.goto('/tests/mbti/test.html#result');\n    \n    // 공유 버튼들 확인\n    const shareButtons = page.locator('.share-button, .social-share button');\n    if (await shareButtons.first().isVisible()) {\n      const shareButtonCount = await shareButtons.count();\n      expect(shareButtonCount).toBeGreaterThan(0);\n      \n      // 링크 복사 버튼 테스트\n      const copyLinkButton = shareButtons.filter({ hasText: /링크.*복사|URL.*복사|Copy/ });\n      if (await copyLinkButton.isVisible()) {\n        await copyLinkButton.click();\n        \n        // 복사 완료 메시지 확인\n        const copyMessage = page.locator('.copy-success, .copied-message');\n        await expect(copyMessage).toBeVisible();\n        await expect(copyMessage).toContainText(/복사|Copy/);\n      }\n      \n      // 카카오톡 공유 버튼 테스트\n      const kakaoButton = shareButtons.filter({ hasText: /카카오|KakaoTalk/ });\n      if (await kakaoButton.isVisible()) {\n        // 클릭 시 새 창이 열리는지 확인 (실제 공유는 하지 않음)\n        const [popup] = await Promise.all([\n          page.waitForEvent('popup'),\n          kakaoButton.click()\n        ]);\n        \n        expect(popup.url()).toContain('kakao');\n        await popup.close();\n      }\n    }\n  });\n\n  test('다시 테스트하기 기능', async ({ page }) => {\n    // 결과 페이지 상태\n    await page.goto('/tests/mbti/test.html#result');\n    \n    // 다시 테스트 버튼 확인\n    const retestButton = page.locator('button, a').filter({ hasText: /다시.*테스트|재시작|다시.*하기/ });\n    if (await retestButton.isVisible()) {\n      await retestButton.click();\n      \n      // 테스트 시작 페이지로 이동 확인\n      await expect(page).toHaveURL(/test|mbti/);\n      \n      // 첫 번째 질문이 나타나는지 확인\n      const firstQuestion = page.locator('.question, .question-container');\n      await expect(firstQuestion).toBeVisible();\n      \n      // 진행률이 처음으로 초기화되었는지 확인\n      const progress = page.locator('.progress-text, .step-counter');\n      if (await progress.isVisible()) {\n        await expect(progress).toContainText(/1|첫/);\n      }\n    }\n  });\n\n  test('뒤로 가기 및 진행 상태 유지', async ({ page }) => {\n    await page.goto('/tests/mbti/test.html');\n    \n    // 몇 개의 질문에 답변\n    for (let i = 0; i < 3; i++) {\n      const options = page.locator('.option, .answer-option, input[type=\"radio\"]');\n      if (await options.first().isVisible()) {\n        await options.first().click();\n        \n        const nextButton = page.locator('button').filter({ hasText: /다음/ });\n        if (await nextButton.isVisible() && !await nextButton.isDisabled()) {\n          await nextButton.click();\n          await page.waitForTimeout(300);\n        }\n      }\n    }\n    \n    // 뒤로 가기 버튼 테스트\n    const backButton = page.locator('button').filter({ hasText: /이전|뒤로|Back/ });\n    if (await backButton.isVisible()) {\n      await backButton.click();\n      \n      // 이전 질문으로 돌아갔는지 확인\n      const question = page.locator('.question');\n      await expect(question).toBeVisible();\n      \n      // 이전에 선택한 답변이 유지되는지 확인\n      const selectedOption = page.locator('.option.selected, input:checked');\n      await expect(selectedOption).toBeVisible();\n    }\n  });\n\n  test('테스트 중단 및 재개', async ({ page }) => {\n    await page.goto('/tests/mbti/test.html');\n    \n    // 몇 개 질문에 답변\n    for (let i = 0; i < 5; i++) {\n      const options = page.locator('.option, input[type=\"radio\"]');\n      if (await options.first().isVisible()) {\n        await options.first().click();\n        \n        const nextButton = page.locator('button').filter({ hasText: /다음/ });\n        if (await nextButton.isVisible()) {\n          await nextButton.click();\n          await page.waitForTimeout(200);\n        }\n      } else {\n        break;\n      }\n    }\n    \n    // 현재 진행 상태 확인\n    const currentProgress = page.locator('.progress-text, .step-counter');\n    let progressText = '';\n    if (await currentProgress.isVisible()) {\n      progressText = await currentProgress.textContent();\n    }\n    \n    // 페이지 새로고침 (중단 시뮬레이션)\n    await page.reload();\n    \n    // 진행 상태가 복원되는지 확인 (localStorage 사용하는 경우)\n    const restoredProgress = page.locator('.progress-text, .step-counter');\n    if (await restoredProgress.isVisible() && progressText) {\n      const restoredText = await restoredProgress.textContent();\n      // 진행 상태가 어느 정도 유지되는지 확인 (정확히 같지 않을 수 있음)\n      expect(restoredText).toMatch(/[0-9]/);\n    }\n  });\n\n  test('모바일에서의 MBTI 테스트', async ({ page }) => {\n    // 모바일 뷰포트 설정\n    await page.setViewportSize({ width: 375, height: 667 });\n    await page.goto('/tests/mbti/test.html');\n    \n    // 모바일에서 질문과 옵션이 잘 보이는지 확인\n    const question = page.locator('.question, .question-container');\n    await expect(question).toBeVisible();\n    \n    const questionBox = await question.boundingBox();\n    expect(questionBox.width).toBeLessThan(400); // 모바일 너비에 맞음\n    \n    // 옵션 버튼들이 터치하기 적절한 크기인지 확인\n    const options = page.locator('.option, button[data-value]');\n    if (await options.first().isVisible()) {\n      const optionBox = await options.first().boundingBox();\n      expect(optionBox.height).toBeGreaterThan(44); // 최소 터치 타겟 크기\n    }\n    \n    // 모바일에서 진행률 표시 확인\n    const progressBar = page.locator('.progress-bar, .progress');\n    if (await progressBar.isVisible()) {\n      const progressBox = await progressBar.boundingBox();\n      expect(progressBox.width).toBeLessThan(400);\n    }\n    \n    // 터치 이벤트로 옵션 선택 테스트\n    if (await options.first().isVisible()) {\n      await options.first().tap();\n      await expect(options.first()).toHaveClass(/selected|active/);\n    }\n  });\n\n  test('접근성 - 키보드 네비게이션', async ({ page }) => {\n    await page.goto('/tests/mbti/test.html');\n    \n    // Tab 키로 네비게이션\n    await page.keyboard.press('Tab');\n    \n    // 포커스가 첫 번째 옵션에 있는지 확인\n    const focusedElement = page.locator(':focus');\n    await expect(focusedElement).toBeVisible();\n    \n    // 화살표 키로 옵션 간 이동 (라디오 버튼인 경우)\n    await page.keyboard.press('ArrowDown');\n    \n    // Enter 또는 Space 키로 선택\n    await page.keyboard.press('Space');\n    \n    // 선택되었는지 확인\n    const selectedOption = page.locator(':focus');\n    await expect(selectedOption).toHaveClass(/selected|active/).or(expect(selectedOption).toBeChecked());\n    \n    // Tab으로 다음 버튼으로 이동\n    await page.keyboard.press('Tab');\n    const nextButton = page.locator(':focus');\n    await expect(nextButton).toContainText(/다음|Next/);\n    \n    // Enter로 다음 질문으로\n    await page.keyboard.press('Enter');\n    await page.waitForTimeout(300);\n    \n    // 다음 질문이 나타났는지 확인\n    const nextQuestion = page.locator('.question');\n    await expect(nextQuestion).toBeVisible();\n  });\n\n  test('화면 읽기 프로그램 지원', async ({ page }) => {\n    await page.goto('/tests/mbti/test.html');\n    \n    // ARIA 레이블 확인\n    const questionContainer = page.locator('.question, [role=\"group\"]');\n    if (await questionContainer.isVisible()) {\n      const ariaLabel = await questionContainer.getAttribute('aria-label');\n      expect(ariaLabel).toBeTruthy();\n    }\n    \n    // 라디오 버튼의 fieldset과 legend 확인\n    const fieldset = page.locator('fieldset');\n    if (await fieldset.isVisible()) {\n      const legend = fieldset.locator('legend');\n      await expect(legend).toBeVisible();\n    }\n    \n    // 진행률의 aria-valuenow 확인\n    const progressBar = page.locator('[role=\"progressbar\"]');\n    if (await progressBar.isVisible()) {\n      const valueNow = await progressBar.getAttribute('aria-valuenow');\n      const valueMax = await progressBar.getAttribute('aria-valuemax');\n      expect(parseInt(valueNow)).toBeGreaterThan(0);\n      expect(parseInt(valueMax)).toBeGreaterThan(parseInt(valueNow));\n    }\n    \n    // 라이브 리전으로 진행 상태 업데이트 확인\n    const liveRegion = page.locator('[aria-live=\"polite\"]');\n    if (await liveRegion.isVisible()) {\n      const initialText = await liveRegion.textContent();\n      \n      // 질문에 답변하고 다음으로\n      const option = page.locator('.option, input[type=\"radio\"]').first();\n      if (await option.isVisible()) {\n        await option.click();\n        \n        const nextButton = page.locator('button').filter({ hasText: /다음/ });\n        if (await nextButton.isVisible()) {\n          await nextButton.click();\n          await page.waitForTimeout(500);\n          \n          // 라이브 리전의 텍스트가 업데이트되었는지 확인\n          const updatedText = await liveRegion.textContent();\n          expect(updatedText).not.toBe(initialText);\n        }\n      }\n    }\n  });\n});"