/**
 * PWA 설치 관리자
 * 크로스 플랫폼 PWA 설치 경험 개선
 * 
 * Features:
 * - 브라우저별 설치 프롬프트 최적화
 * - 설치 상태 추적 및 분석
 * - 사용자 친화적 설치 안내
 * - A/B 테스트 지원
 */

class PWAInstallManager {
  constructor() {
    this.config = {
      // 프롬프트 설정
      prompt: {\n        minSessionTime: 30000, // 30초 후 프롬프트 표시\n        minPageViews: 3, // 3페이지 방문 후\n        cooldownPeriod: 7 * 24 * 60 * 60 * 1000, // 7일 쿨다운\n        maxDismissCount: 3, // 최대 3회 거부시 영구 숨김\n        abTestVariants: ['default', 'benefit_focused', 'minimal'],\n      },\n      \n      // 브라우저별 설정\n      browsers: {\n        chrome: {\n          supportBeforeInstallPrompt: true,\n          customPromptDelay: 2000,\n        },\n        edge: {\n          supportBeforeInstallPrompt: true,\n          customPromptDelay: 2000,\n        },\n        firefox: {\n          supportBeforeInstallPrompt: false,\n          showInstructions: true,\n        },\n        safari: {\n          supportBeforeInstallPrompt: false,\n          showIOSInstructions: true,\n        },\n      },\n      \n      // 메트릭 추적\n      analytics: {\n        trackPromptShown: true,\n        trackInstallAccepted: true,\n        trackInstallCompleted: true,\n        trackUsageAfterInstall: true,\n      },\n      \n      // UI 설정\n      ui: {\n        animationDuration: 300,\n        backdropBlur: true,\n        preventBodyScroll: false,\n        autoHideDelay: 8000,\n      },\n    };\n    \n    this.state = {\n      browserInfo: null,\n      installPromptEvent: null,\n      isInstalled: false,\n      hasBeenPrompted: false,\n      dismissCount: 0,\n      sessionStartTime: Date.now(),\n      pageViewCount: 0,\n      currentVariant: null,\n      userEngagement: {\n        timeOnSite: 0,\n        interactionCount: 0,\n        scrollDepth: 0,\n      },\n    };\n    \n    this.elements = {\n      promptContainer: null,\n      backdropElement: null,\n    };\n    \n    this.init();\n  }\n  \n  /**\n   * 초기화\n   */\n  init() {\n    this.detectBrowserEnvironment();\n    this.loadUserState();\n    this.setupEventListeners();\n    this.trackUserEngagement();\n    this.evaluateInstallPromptTrigger();\n    \n    console.log('[PWA Install] 설치 관리자 초기화됨:', this.state);\n  }\n  \n  /**\n   * 브라우저 환경 감지\n   */\n  detectBrowserEnvironment() {\n    const userAgent = navigator.userAgent.toLowerCase();\n    \n    this.state.browserInfo = {\n      isChrome: /chrome/.test(userAgent) && !/edge/.test(userAgent),\n      isEdge: /edge/.test(userAgent),\n      isFirefox: /firefox/.test(userAgent),\n      isSafari: /safari/.test(userAgent) && !/chrome/.test(userAgent),\n      isIOSDevice: /ipad|iphone|ipod/.test(userAgent),\n      isAndroid: /android/.test(userAgent),\n      isPWAMode: window.matchMedia('(display-mode: standalone)').matches,\n      supportsInstallPrompt: 'BeforeInstallPromptEvent' in window,\n    };\n    \n    // A/B 테스트 변형 선택\n    this.selectABTestVariant();\n  }\n  \n  /**\n   * 사용자 상태 로드\n   */\n  loadUserState() {\n    try {\n      const storedState = localStorage.getItem('pwa-install-state');\n      if (storedState) {\n        const parsed = JSON.parse(storedState);\n        this.state.dismissCount = parsed.dismissCount || 0;\n        this.state.hasBeenPrompted = parsed.hasBeenPrompted || false;\n        this.state.currentVariant = parsed.currentVariant;\n      }\n      \n      // 페이지 뷰 카운트 증가\n      this.state.pageViewCount = this.getSessionPageViews() + 1;\n      this.saveSessionPageViews(this.state.pageViewCount);\n      \n    } catch (error) {\n      console.warn('[PWA Install] 사용자 상태 로드 실패:', error);\n    }\n  }\n  \n  /**\n   * 이벤트 리스너 설정\n   */\n  setupEventListeners() {\n    // beforeinstallprompt 이벤트 (Chrome, Edge)\n    window.addEventListener('beforeinstallprompt', (e) => {\n      e.preventDefault();\n      this.state.installPromptEvent = e;\n      console.log('[PWA Install] beforeinstallprompt 이벤트 캐치됨');\n    });\n    \n    // 앱 설치 완료 감지\n    window.addEventListener('appinstalled', () => {\n      this.handleInstallCompleted();\n    });\n    \n    // PWA 디스플레이 모드 변경 감지\n    window.matchMedia('(display-mode: standalone)').addEventListener('change', (e) => {\n      if (e.matches) {\n        this.handleInstallCompleted();\n      }\n    });\n    \n    // 페이지 언로드시 상태 저장\n    window.addEventListener('beforeunload', () => {\n      this.saveUserState();\n    });\n    \n    // 가시성 변경 추적 (사용자 참여도 측정)\n    document.addEventListener('visibilitychange', () => {\n      this.trackVisibilityChange();\n    });\n  }\n  \n  /**\n   * 사용자 참여도 추적\n   */\n  trackUserEngagement() {\n    // 스크롤 깊이 추적\n    let maxScrollDepth = 0;\n    window.addEventListener('scroll', this.throttle(() => {\n      const scrollPercent = (window.scrollY + window.innerHeight) / document.body.scrollHeight;\n      maxScrollDepth = Math.max(maxScrollDepth, scrollPercent);\n      this.state.userEngagement.scrollDepth = Math.min(maxScrollDepth, 1);\n    }, 1000));\n    \n    // 클릭/터치 상호작용 추적\n    ['click', 'touchstart'].forEach(eventType => {\n      document.addEventListener(eventType, () => {\n        this.state.userEngagement.interactionCount++;\n      }, { passive: true });\n    });\n    \n    // 사이트 체류시간 추적\n    setInterval(() => {\n      if (!document.hidden) {\n        this.state.userEngagement.timeOnSite = Date.now() - this.state.sessionStartTime;\n      }\n    }, 5000);\n  }\n  \n  /**\n   * 설치 프롬프트 트리거 평가\n   */\n  evaluateInstallPromptTrigger() {\n    // 이미 설치된 경우 프롬프트 표시하지 않음\n    if (this.state.browserInfo.isPWAMode || this.state.isInstalled) {\n      return;\n    }\n    \n    // 최대 거부 횟수 초과시\n    if (this.state.dismissCount >= this.config.prompt.maxDismissCount) {\n      console.log('[PWA Install] 최대 거부 횟수 초과, 프롬프트 비활성화');\n      return;\n    }\n    \n    // 쿨다운 기간 확인\n    const lastDismissTime = this.getLastDismissTime();\n    if (lastDismissTime && Date.now() - lastDismissTime < this.config.prompt.cooldownPeriod) {\n      console.log('[PWA Install] 쿨다운 기간 중, 프롬프트 대기');\n      return;\n    }\n    \n    // 트리거 조건 확인\n    setTimeout(() => {\n      this.checkPromptTriggerConditions();\n    }, this.config.prompt.minSessionTime);\n  }\n  \n  /**\n   * 프롬프트 트리거 조건 확인\n   */\n  checkPromptTriggerConditions() {\n    const conditions = {\n      timeOnSite: this.state.userEngagement.timeOnSite >= this.config.prompt.minSessionTime,\n      pageViews: this.state.pageViewCount >= this.config.prompt.minPageViews,\n      userEngagement: this.state.userEngagement.interactionCount > 0,\n      scrollDepth: this.state.userEngagement.scrollDepth > 0.3,\n    };\n    \n    const conditionsMet = Object.values(conditions).filter(Boolean).length >= 2;\n    \n    if (conditionsMet) {\n      console.log('[PWA Install] 프롬프트 조건 충족:', conditions);\n      this.showInstallPrompt();\n    } else {\n      console.log('[PWA Install] 프롬프트 조건 미충족:', conditions);\n    }\n  }\n  \n  /**\n   * 설치 프롬프트 표시\n   */\n  async showInstallPrompt() {\n    if (this.state.hasBeenPrompted) {\n      return;\n    }\n    \n    this.state.hasBeenPrompted = true;\n    \n    try {\n      // 브라우저별 프롬프트 처리\n      if (this.state.browserInfo.isIOSDevice && this.state.browserInfo.isSafari) {\n        await this.showIOSInstallInstructions();\n      } else if (this.state.installPromptEvent) {\n        await this.showNativeInstallPrompt();\n      } else {\n        await this.showCustomInstallPrompt();\n      }\n      \n      // 분석 추적\n      this.trackEvent('install_prompt_shown', {\n        variant: this.state.currentVariant,\n        browser: this.getBrowserName(),\n        trigger_conditions: this.getEngagementMetrics(),\n      });\n      \n    } catch (error) {\n      console.error('[PWA Install] 프롬프트 표시 오류:', error);\n    }\n  }\n  \n  /**\n   * 네이티브 설치 프롬프트 표시\n   */\n  async showNativeInstallPrompt() {\n    try {\n      const promptResult = await this.state.installPromptEvent.prompt();\n      const choiceResult = await this.state.installPromptEvent.userChoice;\n      \n      console.log('[PWA Install] 네이티브 프롬프트 결과:', choiceResult.outcome);\n      \n      if (choiceResult.outcome === 'accepted') {\n        this.handleInstallAccepted();\n      } else {\n        this.handleInstallDismissed();\n      }\n      \n      // 이벤트 객체 정리\n      this.state.installPromptEvent = null;\n      \n    } catch (error) {\n      console.error('[PWA Install] 네이티브 프롬프트 오류:', error);\n      // 폴백으로 커스텀 프롬프트 표시\n      await this.showCustomInstallPrompt();\n    }\n  }\n  \n  /**\n   * 커스텀 설치 프롬프트 표시\n   */\n  async showCustomInstallPrompt() {\n    const promptElement = this.createCustomPromptElement();\n    this.elements.promptContainer = promptElement;\n    \n    // 백드롭 생성\n    if (this.config.ui.backdropBlur) {\n      this.createBackdrop();\n    }\n    \n    // 바디 스크롤 방지\n    if (this.config.ui.preventBodyScroll) {\n      document.body.style.overflow = 'hidden';\n    }\n    \n    // DOM에 추가\n    document.body.appendChild(promptElement);\n    \n    // 애니메이션과 함께 표시\n    await this.animatePromptIn(promptElement);\n    \n    // 자동 숨김 타이머\n    setTimeout(() => {\n      if (this.elements.promptContainer) {\n        this.hideInstallPrompt();\n      }\n    }, this.config.ui.autoHideDelay);\n  }\n  \n  /**\n   * 커스텀 프롬프트 요소 생성\n   */\n  createCustomPromptElement() {\n    const variant = this.state.currentVariant;\n    const content = this.getPromptContent(variant);\n    \n    const element = document.createElement('div');\n    element.id = 'pwa-install-prompt';\n    element.className = `pwa-prompt pwa-prompt--${variant}`;\n    \n    element.innerHTML = `\n      <div class=\"pwa-prompt__content\">\n        <div class=\"pwa-prompt__header\">\n          <div class=\"pwa-prompt__icon\">${content.icon}</div>\n          <h3 class=\"pwa-prompt__title\">${content.title}</h3>\n          <button class=\"pwa-prompt__close\" aria-label=\"닫기\">&times;</button>\n        </div>\n        \n        <div class=\"pwa-prompt__body\">\n          <p class=\"pwa-prompt__description\">${content.description}</p>\n          \n          ${content.benefits ? `\n            <ul class=\"pwa-prompt__benefits\">\n              ${content.benefits.map(benefit => `\n                <li class=\"pwa-prompt__benefit\">\n                  <span class=\"benefit__icon\">${benefit.icon}</span>\n                  <span class=\"benefit__text\">${benefit.text}</span>\n                </li>\n              `).join('')}\n            </ul>\n          ` : ''}\n        </div>\n        \n        <div class=\"pwa-prompt__footer\">\n          <button class=\"pwa-prompt__button pwa-prompt__button--primary\" id=\"install-accept\">\n            ${content.acceptText}\n          </button>\n          <button class=\"pwa-prompt__button pwa-prompt__button--secondary\" id=\"install-dismiss\">\n            ${content.dismissText}\n          </button>\n        </div>\n      </div>\n    `;\n    \n    // 이벤트 리스너 연결\n    this.attachPromptEventListeners(element);\n    \n    // 스타일 적용\n    this.applyPromptStyles();\n    \n    return element;\n  }\n  \n  /**\n   * 프롬프트 콘텐츠 가져오기\n   */\n  getPromptContent(variant) {\n    const contents = {\n      default: {\n        icon: '📱',\n        title: '앱으로 설치하기',\n        description: 'doha.kr을 홈 화면에 추가하여 더 빠르고 편리하게 이용하세요.',\n        acceptText: '설치하기',\n        dismissText: '나중에',\n      },\n      \n      benefit_focused: {\n        icon: '🚀',\n        title: '더 나은 경험을 위해',\n        description: '앱으로 설치하면 다음과 같은 혜택을 누릴 수 있습니다:',\n        benefits: [\n          { icon: '⚡', text: '더 빠른 로딩 속도' },\n          { icon: '📵', text: '오프라인에서도 이용 가능' },\n          { icon: '🔔', text: '새로운 콘텐츠 알림' },\n          { icon: '🏠', text: '홈 화면에서 바로 접근' },\n        ],\n        acceptText: '지금 설치',\n        dismissText: '건너뛰기',\n      },\n      \n      minimal: {\n        icon: '⬇️',\n        title: '설치',\n        description: '홈 화면에 추가',\n        acceptText: '추가',\n        dismissText: '취소',\n      },\n    };\n    \n    return contents[variant] || contents.default;\n  }\n  \n  /**\n   * iOS 설치 안내 표시\n   */\n  async showIOSInstallInstructions() {\n    const instructionsElement = this.createIOSInstructionsElement();\n    this.elements.promptContainer = instructionsElement;\n    \n    document.body.appendChild(instructionsElement);\n    await this.animatePromptIn(instructionsElement);\n  }\n  \n  /**\n   * iOS 설치 안내 요소 생성\n   */\n  createIOSInstructionsElement() {\n    const element = document.createElement('div');\n    element.id = 'ios-install-instructions';\n    element.className = 'ios-instructions';\n    \n    element.innerHTML = `\n      <div class=\"ios-instructions__content\">\n        <div class=\"ios-instructions__header\">\n          <h3>홈 화면에 추가하기</h3>\n          <button class=\"ios-instructions__close\">&times;</button>\n        </div>\n        \n        <div class=\"ios-instructions__body\">\n          <p>Safari에서 홈 화면에 추가하여 앱처럼 사용하세요:</p>\n          \n          <div class=\"ios-instructions__steps\">\n            <div class=\"step\">\n              <div class=\"step__number\">1</div>\n              <div class=\"step__content\">\n                <div class=\"step__icon\">📤</div>\n                <p>하단의 <strong>공유</strong> 버튼을 누르세요</p>\n              </div>\n            </div>\n            \n            <div class=\"step\">\n              <div class=\"step__number\">2</div>\n              <div class=\"step__content\">\n                <div class=\"step__icon\">➕</div>\n                <p><strong>\"홈 화면에 추가\"</strong>를 선택하세요</p>\n              </div>\n            </div>\n            \n            <div class=\"step\">\n              <div class=\"step__number\">3</div>\n              <div class=\"step__content\">\n                <div class=\"step__icon\">✅</div>\n                <p><strong>\"추가\"</strong>를 눌러 완료하세요</p>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"ios-instructions__footer\">\n          <button class=\"ios-instructions__dismiss\">확인했습니다</button>\n        </div>\n      </div>\n    `;\n    \n    // iOS 전용 스타일 적용\n    this.applyIOSInstructionStyles();\n    \n    // 이벤트 리스너\n    element.querySelector('.ios-instructions__close').addEventListener('click', () => {\n      this.hideInstallPrompt();\n      this.handleInstallDismissed();\n    });\n    \n    element.querySelector('.ios-instructions__dismiss').addEventListener('click', () => {\n      this.hideInstallPrompt();\n      this.handleInstallDismissed();\n    });\n    \n    return element;\n  }\n  \n  /**\n   * 설치 수락 처리\n   */\n  handleInstallAccepted() {\n    console.log('[PWA Install] 설치 수락됨');\n    \n    this.trackEvent('install_accepted', {\n      variant: this.state.currentVariant,\n      browser: this.getBrowserName(),\n      session_metrics: this.getEngagementMetrics(),\n    });\n    \n    this.hideInstallPrompt();\n  }\n  \n  /**\n   * 설치 거부 처리\n   */\n  handleInstallDismissed() {\n    console.log('[PWA Install] 설치 거부됨');\n    \n    this.state.dismissCount++;\n    this.setLastDismissTime(Date.now());\n    \n    this.trackEvent('install_dismissed', {\n      variant: this.state.currentVariant,\n      dismiss_count: this.state.dismissCount,\n      browser: this.getBrowserName(),\n    });\n    \n    this.hideInstallPrompt();\n    this.saveUserState();\n  }\n  \n  /**\n   * 설치 완료 처리\n   */\n  handleInstallCompleted() {\n    console.log('[PWA Install] 설치 완료됨');\n    \n    this.state.isInstalled = true;\n    \n    this.trackEvent('install_completed', {\n      variant: this.state.currentVariant,\n      browser: this.getBrowserName(),\n      installation_method: this.getInstallationMethod(),\n    });\n    \n    // 설치 완료 알림 표시\n    this.showInstallSuccessMessage();\n    \n    // 설치 후 사용 추적 시작\n    this.startPostInstallTracking();\n    \n    this.saveUserState();\n  }\n  \n  /**\n   * 프롬프트 숨기기\n   */\n  async hideInstallPrompt() {\n    if (!this.elements.promptContainer) return;\n    \n    await this.animatePromptOut(this.elements.promptContainer);\n    \n    // DOM에서 제거\n    if (this.elements.promptContainer.parentNode) {\n      this.elements.promptContainer.parentNode.removeChild(this.elements.promptContainer);\n    }\n    \n    // 백드롭 제거\n    if (this.elements.backdropElement) {\n      this.elements.backdropElement.remove();\n      this.elements.backdropElement = null;\n    }\n    \n    // 바디 스크롤 복원\n    if (this.config.ui.preventBodyScroll) {\n      document.body.style.overflow = '';\n    }\n    \n    this.elements.promptContainer = null;\n  }\n  \n  /**\n   * 프롬프트 애니메이션 인\n   */\n  async animatePromptIn(element) {\n    element.style.cssText = `\n      opacity: 0;\n      transform: translateY(100%);\n      transition: all ${this.config.ui.animationDuration}ms ease;\n    `;\n    \n    // 다음 프레임에서 애니메이션 시작\n    await new Promise(resolve => requestAnimationFrame(resolve));\n    \n    element.style.opacity = '1';\n    element.style.transform = 'translateY(0)';\n    \n    // 애니메이션 완료 대기\n    await new Promise(resolve => \n      setTimeout(resolve, this.config.ui.animationDuration)\n    );\n  }\n  \n  /**\n   * 프롬프트 애니메이션 아웃\n   */\n  async animatePromptOut(element) {\n    element.style.opacity = '0';\n    element.style.transform = 'translateY(100%)';\n    \n    await new Promise(resolve => \n      setTimeout(resolve, this.config.ui.animationDuration)\n    );\n  }\n  \n  /**\n   * 유틸리티 메서드들\n   */\n  \n  selectABTestVariant() {\n    if (!this.state.currentVariant) {\n      const variants = this.config.prompt.abTestVariants;\n      const randomIndex = Math.floor(Math.random() * variants.length);\n      this.state.currentVariant = variants[randomIndex];\n    }\n  }\n  \n  getBrowserName() {\n    const info = this.state.browserInfo;\n    if (info.isChrome) return 'chrome';\n    if (info.isEdge) return 'edge';\n    if (info.isFirefox) return 'firefox';\n    if (info.isSafari) return 'safari';\n    return 'unknown';\n  }\n  \n  getEngagementMetrics() {\n    return {\n      time_on_site: this.state.userEngagement.timeOnSite,\n      interaction_count: this.state.userEngagement.interactionCount,\n      scroll_depth: this.state.userEngagement.scrollDepth,\n      page_views: this.state.pageViewCount,\n    };\n  }\n  \n  getInstallationMethod() {\n    if (this.state.installPromptEvent) return 'native_prompt';\n    if (this.state.browserInfo.isIOSDevice) return 'ios_manual';\n    return 'unknown';\n  }\n  \n  saveUserState() {\n    try {\n      const stateToSave = {\n        dismissCount: this.state.dismissCount,\n        hasBeenPrompted: this.state.hasBeenPrompted,\n        currentVariant: this.state.currentVariant,\n        isInstalled: this.state.isInstalled,\n      };\n      \n      localStorage.setItem('pwa-install-state', JSON.stringify(stateToSave));\n    } catch (error) {\n      console.warn('[PWA Install] 상태 저장 실패:', error);\n    }\n  }\n  \n  getSessionPageViews() {\n    return parseInt(sessionStorage.getItem('pwa-session-page-views') || '0');\n  }\n  \n  saveSessionPageViews(count) {\n    sessionStorage.setItem('pwa-session-page-views', count.toString());\n  }\n  \n  getLastDismissTime() {\n    const stored = localStorage.getItem('pwa-install-last-dismiss');\n    return stored ? parseInt(stored) : null;\n  }\n  \n  setLastDismissTime(timestamp) {\n    localStorage.setItem('pwa-install-last-dismiss', timestamp.toString());\n  }\n  \n  throttle(func, limit) {\n    let inThrottle;\n    return function() {\n      const args = arguments;\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  }\n  \n  trackEvent(eventName, eventData) {\n    if (typeof gtag !== 'undefined') {\n      gtag('event', eventName, {\n        ...eventData,\n        timestamp: Date.now(),\n      });\n    }\n    \n    console.log(`[PWA Install] Event: ${eventName}`, eventData);\n  }\n  \n  // ... 기타 메서드들 (스타일 적용, 이벤트 처리 등)\n  \n  applyPromptStyles() {\n    if (document.getElementById('pwa-prompt-styles')) return;\n    \n    const style = document.createElement('style');\n    style.id = 'pwa-prompt-styles';\n    style.textContent = `\n      /* PWA 설치 프롬프트 스타일 */\n      .pwa-prompt {\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        z-index: 10000;\n        max-width: 500px;\n        margin: 0 auto;\n        background: white;\n        border-radius: 16px 16px 0 0;\n        box-shadow: 0 -8px 32px rgba(0, 0, 0, 0.15);\n        border: 1px solid #e5e7eb;\n      }\n      \n      .pwa-prompt__content {\n        padding: 24px;\n      }\n      \n      .pwa-prompt__header {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n        margin-bottom: 16px;\n      }\n      \n      .pwa-prompt__icon {\n        font-size: 24px;\n        flex-shrink: 0;\n      }\n      \n      .pwa-prompt__title {\n        flex: 1;\n        margin: 0;\n        font-size: 18px;\n        font-weight: 600;\n        color: #111827;\n      }\n      \n      .pwa-prompt__close {\n        background: none;\n        border: none;\n        font-size: 24px;\n        color: #6b7280;\n        cursor: pointer;\n        padding: 4px;\n        border-radius: 4px;\n        flex-shrink: 0;\n      }\n      \n      .pwa-prompt__close:hover {\n        background: #f3f4f6;\n      }\n      \n      .pwa-prompt__description {\n        margin: 0 0 16px;\n        color: #374151;\n        line-height: 1.6;\n      }\n      \n      .pwa-prompt__benefits {\n        list-style: none;\n        margin: 0 0 20px;\n        padding: 0;\n      }\n      \n      .pwa-prompt__benefit {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        margin-bottom: 8px;\n        font-size: 14px;\n        color: #374151;\n      }\n      \n      .benefit__icon {\n        font-size: 16px;\n        flex-shrink: 0;\n      }\n      \n      .pwa-prompt__footer {\n        display: flex;\n        gap: 12px;\n      }\n      \n      .pwa-prompt__button {\n        flex: 1;\n        padding: 12px 16px;\n        border-radius: 8px;\n        border: none;\n        font-size: 16px;\n        font-weight: 500;\n        cursor: pointer;\n        transition: all 150ms ease;\n      }\n      \n      .pwa-prompt__button--primary {\n        background: #6366f1;\n        color: white;\n      }\n      \n      .pwa-prompt__button--primary:hover {\n        background: #5856eb;\n      }\n      \n      .pwa-prompt__button--secondary {\n        background: #f3f4f6;\n        color: #374151;\n        border: 1px solid #d1d5db;\n      }\n      \n      .pwa-prompt__button--secondary:hover {\n        background: #e5e7eb;\n      }\n      \n      @media (max-width: 480px) {\n        .pwa-prompt {\n          left: 8px;\n          right: 8px;\n          border-radius: 16px;\n          bottom: 8px;\n        }\n        \n        .pwa-prompt__footer {\n          flex-direction: column;\n        }\n      }\n    `;\n    \n    document.head.appendChild(style);\n  }\n  \n  attachPromptEventListeners(element) {\n    element.querySelector('#install-accept').addEventListener('click', () => {\n      this.handleInstallAccepted();\n    });\n    \n    element.querySelector('#install-dismiss').addEventListener('click', () => {\n      this.handleInstallDismissed();\n    });\n    \n    element.querySelector('.pwa-prompt__close').addEventListener('click', () => {\n      this.handleInstallDismissed();\n    });\n  }\n  \n  createBackdrop() {\n    const backdrop = document.createElement('div');\n    backdrop.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n      backdrop-filter: blur(4px);\n      z-index: 9999;\n      opacity: 0;\n      transition: opacity ${this.config.ui.animationDuration}ms ease;\n    `;\n    \n    document.body.appendChild(backdrop);\n    this.elements.backdropElement = backdrop;\n    \n    // 애니메이션\n    requestAnimationFrame(() => {\n      backdrop.style.opacity = '1';\n    });\n    \n    // 클릭시 닫기\n    backdrop.addEventListener('click', () => {\n      this.hideInstallPrompt();\n      this.handleInstallDismissed();\n    });\n  }\n  \n  showInstallSuccessMessage() {\n    const toast = document.createElement('div');\n    toast.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #10b981;\n      color: white;\n      padding: 16px 20px;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      z-index: 10001;\n      font-weight: 500;\n      transform: translateX(100%);\n      transition: transform 300ms ease;\n    `;\n    \n    toast.textContent = '✅ 앱이 성공적으로 설치되었습니다!';\n    document.body.appendChild(toast);\n    \n    setTimeout(() => {\n      toast.style.transform = 'translateX(0)';\n    }, 100);\n    \n    setTimeout(() => {\n      toast.style.transform = 'translateX(100%)';\n      setTimeout(() => toast.remove(), 300);\n    }, 4000);\n  }\n  \n  startPostInstallTracking() {\n    // 설치 후 사용 패턴 추적\n    const trackingData = {\n      installDate: Date.now(),\n      sessionCount: 0,\n      totalUsageTime: 0,\n    };\n    \n    localStorage.setItem('pwa-post-install-tracking', JSON.stringify(trackingData));\n    \n    // 일주일 후 만족도 조사 (예시)\n    setTimeout(() => {\n      this.showPostInstallSurvey();\n    }, 7 * 24 * 60 * 60 * 1000);\n  }\n  \n  // ... 기타 메서드들 계속\n}\n\n// 전역 인스턴스 생성\nif (typeof window !== 'undefined') {\n  window.PWAInstallManager = PWAInstallManager;\n  \n  // 자동 초기화\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n      window.pwaInstallManager = new PWAInstallManager();\n    });\n  } else {\n    window.pwaInstallManager = new PWAInstallManager();\n  }\n}\n\nexport default PWAInstallManager;"