/**
 * iOS Safari PWA 최적화
 * iOS Safari의 PWA 특성을 고려한 최적화 및 호환성 처리
 * 
 * Features:
 * - iOS Safari 특화 터치 제스처
 * - Safe Area 대응
 * - iOS PWA 설치 안내
 * - 뷰포트 최적화
 * - 터치 반응성 개선
 */

class IOSSafariOptimizer {
  constructor() {
    this.config = {
      // iOS 감지 설정
      detection: {
        iOS: /iPad|iPhone|iPod/.test(navigator.userAgent),
        Safari: /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent),
        PWAMode: window.matchMedia('(display-mode: standalone)').matches,
        version: this.getIOSVersion(),
      },
      
      // 터치 제스처 설정
      touch: {
        maxTapDistance: 10,
        maxTapTime: 300,
        scrollThreshold: 5,
        swipeThreshold: 100,
        swipeMinVelocity: 0.3,
      },
      
      // 뷰포트 설정
      viewport: {
        safeAreaInsets: null,
        orientationChangeDelay: 500,
        scrollLockEnabled: false,
      },
      
      // 성능 설정
      performance: {
        passiveEventListeners: true,
        touchActionOptimization: true,
        scrollOptimization: true,
      },
      
      // UI 개선 설정
      ui: {
        bounceScrollDisabled: false,
        tapHighlightDisabled: true,
        userSelectOptimized: true,
        safariBarHiding: true,
      },
    };
    
    this.state = {
      isIOSDevice: false,
      isSafari: false,
      isPWAMode: false,
      orientation: null,
      safeAreaInsets: null,
      touchStartTime: 0,
      touchStartPos: null,
      scrollLocked: false,
    };
    
    this.init();
  }
  
  /**
   * 초기화
   */
  init() {\n    this.detectIOSEnvironment();\n    \n    if (this.state.isIOSDevice) {\n      this.setupIOSOptimizations();\n      this.setupSafeAreaHandling();\n      this.setupTouchOptimization();\n      this.setupViewportHandling();\n      this.setupPWASpecificFeatures();\n      this.setupIOSInstallPrompt();\n      \n      console.log('[iOS Safari] iOS 최적화 적용됨:', this.state);\n    }\n    \n    // 모든 브라우저에서 공통 적용할 터치 개선사항\n    this.setupUniversalTouchImprovements();\n  }\n  \n  /**\n   * iOS 환경 감지\n   */\n  detectIOSEnvironment() {\n    this.state.isIOSDevice = this.config.detection.iOS;\n    this.state.isSafari = this.config.detection.Safari;\n    this.state.isPWAMode = this.config.detection.PWAMode;\n    this.state.orientation = this.getOrientation();\n    \n    // iOS 버전별 특별 처리\n    const iosVersion = this.config.detection.version;\n    if (iosVersion) {\n      this.handleIOSVersionSpecifics(iosVersion);\n    }\n    \n    // Body에 클래스 추가\n    document.body.classList.toggle('ios-device', this.state.isIOSDevice);\n    document.body.classList.toggle('safari-browser', this.state.isSafari);\n    document.body.classList.toggle('pwa-mode', this.state.isPWAMode);\n  }\n  \n  /**\n   * iOS 최적화 설정\n   */\n  setupIOSOptimizations() {\n    // CSS 변수 설정\n    this.setCSSOptimizations();\n    \n    // 메타 태그 동적 설정\n    this.setIOSMetaTags();\n    \n    // 스크롤 최적화\n    this.setupScrollOptimization();\n    \n    // 터치 피드백 최적화\n    this.setupTouchFeedback();\n    \n    // 키보드 처리\n    this.setupKeyboardHandling();\n  }\n  \n  /**\n   * CSS 최적화 설정\n   */\n  setCSSOptimizations() {\n    const style = document.createElement('style');\n    style.id = 'ios-safari-optimizations';\n    style.textContent = `\n      :root {\n        /* iOS Safe Area 변수 */\n        --safe-area-inset-top: env(safe-area-inset-top);\n        --safe-area-inset-right: env(safe-area-inset-right);\n        --safe-area-inset-bottom: env(safe-area-inset-bottom);\n        --safe-area-inset-left: env(safe-area-inset-left);\n      }\n      \n      /* iOS 전용 최적화 */\n      .ios-device {\n        /* 터치 최적화 */\n        -webkit-touch-callout: none;\n        -webkit-text-size-adjust: 100%;\n        -webkit-tap-highlight-color: transparent;\n        \n        /* 스크롤 최적화 */\n        -webkit-overflow-scrolling: touch;\n        overscroll-behavior: none;\n      }\n      \n      /* PWA 모드 최적화 */\n      .pwa-mode {\n        /* 상태바 영역 고려 */\n        padding-top: env(safe-area-inset-top);\n        padding-bottom: env(safe-area-inset-bottom);\n      }\n      \n      /* 터치 타겟 최적화 */\n      .ios-device button,\n      .ios-device [role=\"button\"],\n      .ios-device .btn {\n        min-height: 44px;\n        min-width: 44px;\n        touch-action: manipulation;\n      }\n      \n      /* 스크롤 영역 최적화 */\n      .ios-device .scroll-container {\n        -webkit-overflow-scrolling: touch;\n        overflow-scrolling: touch;\n      }\n      \n      /* 입력 필드 최적화 */\n      .ios-device input,\n      .ios-device textarea,\n      .ios-device select {\n        -webkit-appearance: none;\n        -webkit-border-radius: 0;\n        border-radius: 8px;\n        font-size: 16px; /* 줌 방지 */\n      }\n      \n      /* 터치 피드백 */\n      .ios-device .touch-feedback {\n        -webkit-tap-highlight-color: rgba(0, 0, 0, 0.1);\n        transition: background-color 0.1s ease;\n      }\n      \n      .ios-device .touch-feedback:active {\n        background-color: rgba(0, 0, 0, 0.05);\n      }\n      \n      /* 스크롤 락 */\n      .ios-device.scroll-locked {\n        position: fixed;\n        width: 100%;\n        overflow: hidden;\n      }\n      \n      /* Safari 바 숨김 처리 */\n      .safari-browser.pwa-mode {\n        /* 전체 화면 활용 */\n        height: 100vh;\n        height: -webkit-fill-available;\n      }\n    `;\n    \n    document.head.appendChild(style);\n  }\n  \n  /**\n   * iOS 메타 태그 설정\n   */\n  setIOSMetaTags() {\n    // 기존 메타 태그 확인 및 업데이트\n    this.updateMetaTag('apple-mobile-web-app-capable', 'yes');\n    this.updateMetaTag('apple-mobile-web-app-status-bar-style', 'default');\n    this.updateMetaTag('apple-mobile-web-app-title', 'doha.kr');\n    \n    // 뷰포트 최적화\n    const viewportMeta = document.querySelector('meta[name=\"viewport\"]');\n    if (viewportMeta) {\n      viewportMeta.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover';\n    }\n  }\n  \n  /**\n   * Safe Area 처리\n   */\n  setupSafeAreaHandling() {\n    // Safe Area Inset 값 계산\n    this.calculateSafeAreaInsets();\n    \n    // 오리엔테이션 변경 감지\n    window.addEventListener('orientationchange', () => {\n      setTimeout(() => {\n        this.handleOrientationChange();\n      }, this.config.viewport.orientationChangeDelay);\n    });\n    \n    // 리사이즈 이벤트\n    window.addEventListener('resize', this.debounce(() => {\n      this.calculateSafeAreaInsets();\n    }, 300));\n  }\n  \n  /**\n   * 터치 최적화\n   */\n  setupTouchOptimization() {\n    // 패시브 이벤트 리스너 설정\n    const passiveOptions = this.config.performance.passiveEventListeners ? \n      { passive: true } : false;\n    \n    // 터치 이벤트 통합 처리\n    document.addEventListener('touchstart', (e) => {\n      this.handleTouchStart(e);\n    }, passiveOptions);\n    \n    document.addEventListener('touchmove', (e) => {\n      this.handleTouchMove(e);\n    }, { passive: false }); // 스크롤 제어를 위해 passive: false\n    \n    document.addEventListener('touchend', (e) => {\n      this.handleTouchEnd(e);\n    }, passiveOptions);\n    \n    // 더블 탭 줌 방지\n    this.preventDoubleZoom();\n    \n    // 스와이프 제스처 설정\n    this.setupSwipeGestures();\n  }\n  \n  /**\n   * 터치 시작 처리\n   */\n  handleTouchStart(e) {\n    this.state.touchStartTime = Date.now();\n    this.state.touchStartPos = {\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY,\n    };\n    \n    // 터치 피드백 추가\n    this.addTouchFeedback(e.target);\n  }\n  \n  /**\n   * 터치 이동 처리\n   */\n  handleTouchMove(e) {\n    if (!this.state.touchStartPos) return;\n    \n    const currentPos = {\n      x: e.touches[0].clientX,\n      y: e.touches[0].clientY,\n    };\n    \n    const deltaX = Math.abs(currentPos.x - this.state.touchStartPos.x);\n    const deltaY = Math.abs(currentPos.y - this.state.touchStartPos.y);\n    \n    // 스크롤이 감지되면 터치 피드백 제거\n    if (deltaX > this.config.touch.scrollThreshold || \n        deltaY > this.config.touch.scrollThreshold) {\n      this.removeTouchFeedback();\n    }\n    \n    // 바운스 스크롤 방지 (필요시)\n    if (this.config.ui.bounceScrollDisabled) {\n      this.preventBounceScroll(e);\n    }\n  }\n  \n  /**\n   * 터치 종료 처리\n   */\n  handleTouchEnd(e) {\n    const touchEndTime = Date.now();\n    const touchDuration = touchEndTime - this.state.touchStartTime;\n    \n    // 터치 피드백 제거\n    setTimeout(() => {\n      this.removeTouchFeedback();\n    }, 100);\n    \n    // 탭 제스처 감지\n    if (this.state.touchStartPos && touchDuration < this.config.touch.maxTapTime) {\n      const endPos = {\n        x: e.changedTouches[0].clientX,\n        y: e.changedTouches[0].clientY,\n      };\n      \n      const distance = Math.sqrt(\n        Math.pow(endPos.x - this.state.touchStartPos.x, 2) +\n        Math.pow(endPos.y - this.state.touchStartPos.y, 2)\n      );\n      \n      if (distance < this.config.touch.maxTapDistance) {\n        this.handleTap(e, endPos);\n      }\n    }\n    \n    // 상태 초기화\n    this.state.touchStartTime = 0;\n    this.state.touchStartPos = null;\n  }\n  \n  /**\n   * 뷰포트 처리 설정\n   */\n  setupViewportHandling() {\n    // Visual Viewport API 지원 확인\n    if (window.visualViewport) {\n      window.visualViewport.addEventListener('resize', () => {\n        this.handleVisualViewportChange();\n      });\n    }\n    \n    // 화면 크기 변경 대응\n    this.setupResponsiveHandling();\n  }\n  \n  /**\n   * PWA 전용 기능 설정\n   */\n  setupPWASpecificFeatures() {\n    if (this.state.isPWAMode) {\n      // PWA 모드에서의 특별 처리\n      this.setupPWAModeOptimizations();\n    } else {\n      // 브라우저 모드에서의 Safari 바 처리\n      this.setupSafariBarHiding();\n    }\n  }\n  \n  /**\n   * iOS PWA 설치 안내\n   */\n  setupIOSInstallPrompt() {\n    // iOS는 자동 설치 프롬프트가 없으므로 수동 안내\n    if (this.state.isIOSDevice && this.state.isSafari && !this.state.isPWAMode) {\n      this.showIOSInstallInstructions();\n    }\n  }\n  \n  /**\n   * iOS 설치 안내 표시\n   */\n  showIOSInstallInstructions() {\n    // 이미 안내를 본 사용자는 제외\n    const dismissed = localStorage.getItem('ios-install-instructions-dismissed');\n    if (dismissed && Date.now() - parseInt(dismissed) < 30 * 24 * 60 * 60 * 1000) {\n      return; // 30일 동안 표시하지 않음\n    }\n    \n    // 페이지 로드 후 일정 시간 뒤 표시\n    setTimeout(() => {\n      this.createIOSInstallPrompt();\n    }, 3000);\n  }\n  \n  /**\n   * iOS 설치 프롬프트 생성\n   */\n  createIOSInstallPrompt() {\n    const prompt = document.createElement('div');\n    prompt.id = 'ios-install-prompt';\n    prompt.innerHTML = `\n      <div class=\"ios-install-content\">\n        <div class=\"ios-install-header\">\n          <div class=\"ios-install-icon\">📱</div>\n          <h3>홈 화면에 추가하기</h3>\n          <button class=\"ios-install-close\">&times;</button>\n        </div>\n        \n        <div class=\"ios-install-body\">\n          <p>더 편리하게 이용하려면 홈 화면에 추가하세요!</p>\n          \n          <div class=\"ios-install-steps\">\n            <div class=\"step\">\n              <div class=\"step-icon\">📤</div>\n              <div class=\"step-text\">하단의 공유 버튼을 누르세요</div>\n            </div>\n            \n            <div class=\"step\">\n              <div class=\"step-icon\">➕</div>\n              <div class=\"step-text\">\"홈 화면에 추가\"를 선택하세요</div>\n            </div>\n            \n            <div class=\"step\">\n              <div class=\"step-icon\">✅</div>\n              <div class=\"step-text\">\"추가\"를 눌러 완료하세요</div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"ios-install-footer\">\n          <button class=\"ios-install-dismiss\">나중에 하기</button>\n        </div>\n      </div>\n    `;\n    \n    // 스타일 적용\n    this.applyIOSInstallPromptStyles(prompt);\n    \n    // 이벤트 리스너\n    this.setupIOSInstallPromptEvents(prompt);\n    \n    // DOM에 추가\n    document.body.appendChild(prompt);\n    \n    // 애니메이션과 함께 표시\n    setTimeout(() => {\n      prompt.classList.add('visible');\n    }, 100);\n  }\n  \n  /**\n   * 공통 터치 개선사항\n   */\n  setupUniversalTouchImprovements() {\n    // 모든 브라우저에서 적용할 터치 개선사항\n    this.improveButtonTouchTargets();\n    this.setupTouchActionOptimization();\n    this.improveScrollPerformance();\n  }\n  \n  /**\n   * 버튼 터치 타겟 개선\n   */\n  improveButtonTouchTargets() {\n    const buttons = document.querySelectorAll('button, [role=\"button\"], .btn');\n    \n    buttons.forEach(button => {\n      const rect = button.getBoundingClientRect();\n      \n      // 44px 미만의 터치 타겟 개선\n      if (rect.width < 44 || rect.height < 44) {\n        button.style.minWidth = '44px';\n        button.style.minHeight = '44px';\n        button.style.padding = Math.max(\n          parseInt(getComputedStyle(button).padding) || 0,\n          8\n        ) + 'px';\n      }\n      \n      // 터치 액션 최적화\n      button.style.touchAction = 'manipulation';\n    });\n  }\n  \n  /**\n   * 스크롤 성능 개선\n   */\n  improveScrollPerformance() {\n    const scrollContainers = document.querySelectorAll(\n      '.scroll-container, [data-scroll], .overflow-auto, .overflow-scroll'\n    );\n    \n    scrollContainers.forEach(container => {\n      if (this.state.isIOSDevice) {\n        container.style.webkitOverflowScrolling = 'touch';\n      }\n      container.style.overscrollBehavior = 'contain';\n    });\n  }\n  \n  /**\n   * 키보드 처리\n   */\n  setupKeyboardHandling() {\n    // iOS에서 키보드가 나타날 때 뷰포트 조정\n    if (window.visualViewport) {\n      window.visualViewport.addEventListener('resize', () => {\n        const currentHeight = window.visualViewport.height;\n        const fullHeight = window.screen.height;\n        \n        // 키보드가 나타났는지 감지 (높이가 75% 미만으로 줄어들면)\n        const keyboardVisible = currentHeight < fullHeight * 0.75;\n        \n        document.body.classList.toggle('keyboard-visible', keyboardVisible);\n        \n        if (keyboardVisible) {\n          this.handleKeyboardShow(currentHeight);\n        } else {\n          this.handleKeyboardHide();\n        }\n      });\n    }\n  }\n  \n  /**\n   * 키보드 표시 처리\n   */\n  handleKeyboardShow(viewportHeight) {\n    // 활성 입력 필드가 키보드에 가려지지 않도록 스크롤\n    const activeElement = document.activeElement;\n    \n    if (activeElement && this.isInputElement(activeElement)) {\n      setTimeout(() => {\n        activeElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center',\n        });\n      }, 300);\n    }\n  }\n  \n  /**\n   * 키보드 숨김 처리\n   */\n  handleKeyboardHide() {\n    // 키보드가 사라진 후 뷰포트 복원\n    window.scrollTo(0, 0);\n  }\n  \n  /**\n   * 유틸리티 메서드들\n   */\n  \n  getIOSVersion() {\n    const match = navigator.userAgent.match(/OS (\\d+)_?(\\d+)?_?(\\d+)?/);\n    if (match) {\n      return {\n        major: parseInt(match[1], 10),\n        minor: parseInt(match[2] || '0', 10),\n        patch: parseInt(match[3] || '0', 10),\n      };\n    }\n    return null;\n  }\n  \n  getOrientation() {\n    if (screen.orientation) {\n      return screen.orientation.type;\n    }\n    return window.orientation ? 'landscape' : 'portrait';\n  }\n  \n  updateMetaTag(name, content) {\n    let meta = document.querySelector(`meta[name=\"${name}\"]`);\n    if (!meta) {\n      meta = document.createElement('meta');\n      meta.name = name;\n      document.head.appendChild(meta);\n    }\n    meta.content = content;\n  }\n  \n  calculateSafeAreaInsets() {\n    if (CSS.supports('padding: env(safe-area-inset-top)')) {\n      // CSS 환경 변수로 자동 처리됨\n      return;\n    }\n    \n    // 폴백: 수동 계산\n    this.state.safeAreaInsets = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n    };\n    \n    // iPhone X 이상에서 노치 영역 고려\n    if (this.hasNotch()) {\n      this.state.safeAreaInsets.top = 44;\n      this.state.safeAreaInsets.bottom = 34;\n    }\n  }\n  \n  hasNotch() {\n    if (this.state.isIOSDevice) {\n      const iosVersion = this.config.detection.version;\n      if (iosVersion && iosVersion.major >= 11) {\n        // iPhone X 이상 감지 (대략적)\n        return window.screen.height >= 812;\n      }\n    }\n    return false;\n  }\n  \n  isInputElement(element) {\n    const inputTypes = ['input', 'textarea', 'select'];\n    return inputTypes.includes(element.tagName.toLowerCase()) ||\n           element.contentEditable === 'true';\n  }\n  \n  debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        clearTimeout(timeout);\n        func(...args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n  \n  // ... 기타 메서드들 계속 구현\n  \n  addTouchFeedback(element) {\n    // 터치 피드백 추가 로직\n  }\n  \n  removeTouchFeedback() {\n    // 터치 피드백 제거 로직\n  }\n  \n  preventDoubleZoom() {\n    // 더블 탭 줌 방지 로직\n  }\n  \n  // ... 나머지 메서드들\n}\n\n// 전역 인스턴스 생성\nif (typeof window !== 'undefined') {\n  window.IOSSafariOptimizer = IOSSafariOptimizer;\n  \n  // 자동 초기화\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n      window.iosSafariOptimizer = new IOSSafariOptimizer();\n    });\n  } else {\n    window.iosSafariOptimizer = new IOSSafariOptimizer();\n  }\n}\n\nexport default IOSSafariOptimizer;"