/**
 * doha.kr Application JavaScript
 * Version: 2.0.0
 * Author: doha.kr
 * Last Updated: 2025-01-05
 */

// Strict mode for better error handling
'use strict';

// Namespace pattern to avoid global pollution
const DohaApp = (() => {
    // Private variables
    const config = {
        animationDuration: 250,
        scrollThreshold: 100,
        debounceDelay: 150,
        apiEndpoints: {
            analytics: '/api/analytics',
            contact: '/api/contact'
        }
    };

    // Cache DOM elements
    const elements = {
        header: null,
        mobileMenuBtn: null,
        nav: null,
        tabButtons: null,
        skipLink: null,
        lazyImages: null
    };

    // State management
    const state = {
        isMenuOpen: false,
        lastScrollY: 0,
        activeTab: 'all'
    };

    // Utility functions
    const utils = {
        /**
         * Debounce function to limit function calls
         */
        debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        },

        /**
         * Throttle function for scroll events
         */
        throttle(func, limit) {
            let inThrottle;
            return function(...args) {
                if (!inThrottle) {
                    func.apply(this, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            };
        },

        /**
         * Safe HTML sanitization
         */
        sanitizeHTML(str) {
            const temp = document.createElement('div');
            temp.textContent = str;
            return temp.innerHTML;
        },

        /**
         * Check if element is in viewport
         */
        isInViewport(element) {
            const rect = element.getBoundingClientRect();
            return (
                rect.top >= 0 &&
                rect.left >= 0 &&
                rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
                rect.right <= (window.innerWidth || document.documentElement.clientWidth)
            );
        },

        /**
         * Local storage wrapper with error handling
         */
        storage: {
            get(key) {
                try {
                    const item = localStorage.getItem(key);
                    return item ? JSON.parse(item) : null;
                } catch (e) {
                    console.error('Storage get error:', e);
                    return null;
                }
            },
            set(key, value) {
                try {
                    localStorage.setItem(key, JSON.stringify(value));
                    return true;
                } catch (e) {
                    console.error('Storage set error:', e);
                    return false;
                }
            },
            remove(key) {
                try {
                    localStorage.removeItem(key);
                    return true;
                } catch (e) {
                    console.error('Storage remove error:', e);
                    return false;
                }
            }
        }
    };

    // UI Components
    const components = {
        /**
         * Initialize header behavior
         */
        header: {
            init() {
                if (!elements.header) return;

                let lastScrollY = window.scrollY;
                let ticking = false;

                const updateHeader = () => {
                    const currentScrollY = window.scrollY;
                    
                    if (currentScrollY > lastScrollY && currentScrollY > config.scrollThreshold) {
                        elements.header.classList.add('header--hidden');
                    } else {
                        elements.header.classList.remove('header--hidden');
                    }
                    
                    lastScrollY = currentScrollY;
                    ticking = false;
                };

                const requestTick = () => {
                    if (!ticking) {
                        window.requestAnimationFrame(updateHeader);
                        ticking = true;
                    }
                };

                window.addEventListener('scroll', utils.throttle(requestTick, 100));
            }
        },

        /**
         * Mobile menu functionality
         */
        mobileMenu: {
            init() {
                if (!elements.mobileMenuBtn || !elements.nav) return;

                elements.mobileMenuBtn.addEventListener('click', this.toggle.bind(this));
                
                // Close menu on escape key
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape' && state.isMenuOpen) {
                        this.close();
                    }
                });

                // Close menu on outside click
                document.addEventListener('click', (e) => {
                    if (state.isMenuOpen && 
                        !elements.nav.contains(e.target) && 
                        !elements.mobileMenuBtn.contains(e.target)) {
                        this.close();
                    }
                });
            },

            toggle() {
                state.isMenuOpen ? this.close() : this.open();
            },

            open() {
                state.isMenuOpen = true;
                elements.nav.classList.add('nav--open');
                elements.mobileMenuBtn.setAttribute('aria-expanded', 'true');
                elements.mobileMenuBtn.setAttribute('aria-label', '메뉴 닫기');
                
                // Trap focus
                const firstLink = elements.nav.querySelector('a');
                if (firstLink) firstLink.focus();
            },

            close() {
                state.isMenuOpen = false;
                elements.nav.classList.remove('nav--open');
                elements.mobileMenuBtn.setAttribute('aria-expanded', 'false');
                elements.mobileMenuBtn.setAttribute('aria-label', '메뉴 열기');
                elements.mobileMenuBtn.focus();
            }
        },

        /**
         * Tab functionality
         */
        tabs: {
            init() {
                if (!elements.tabButtons) return;

                elements.tabButtons.forEach(button => {
                    button.addEventListener('click', (e) => {
                        this.switchTab(e.target);
                    });

                    // Keyboard navigation
                    button.addEventListener('keydown', (e) => {
                        this.handleKeyboard(e);
                    });
                });
            },

            switchTab(button) {
                if (button.getAttribute('aria-selected') === 'true') return;

                // Update buttons
                elements.tabButtons.forEach(btn => {
                    btn.setAttribute('aria-selected', 'false');
                    btn.classList.remove('tabs__button--active');
                });
                
                button.setAttribute('aria-selected', 'true');
                button.classList.add('tabs__button--active');

                // Update panels
                const targetPanel = button.getAttribute('aria-controls');
                const category = button.id.replace('tab-', '');
                
                this.filterServices(category);
                
                // Announce to screen readers
                this.announceChange(button.textContent);
            },

            filterServices(category) {
                const services = document.querySelectorAll('.service-card');
                
                services.forEach(service => {
                    if (category === 'all' || service.dataset.category.includes(category)) {
                        service.style.display = '';
                        service.setAttribute('aria-hidden', 'false');
                    } else {
                        service.style.display = 'none';
                        service.setAttribute('aria-hidden', 'true');
                    }
                });
            },

            handleKeyboard(e) {
                const currentIndex = Array.from(elements.tabButtons).indexOf(e.target);
                let newIndex;

                switch(e.key) {
                    case 'ArrowLeft':
                        newIndex = currentIndex - 1;
                        if (newIndex < 0) newIndex = elements.tabButtons.length - 1;
                        break;
                    case 'ArrowRight':
                        newIndex = currentIndex + 1;
                        if (newIndex >= elements.tabButtons.length) newIndex = 0;
                        break;
                    case 'Home':
                        newIndex = 0;
                        break;
                    case 'End':
                        newIndex = elements.tabButtons.length - 1;
                        break;
                    default:
                        return;
                }

                e.preventDefault();
                elements.tabButtons[newIndex].focus();
                this.switchTab(elements.tabButtons[newIndex]);
            },

            announceChange(tabName) {
                const announcement = document.createElement('div');
                announcement.className = 'sr-only';
                announcement.setAttribute('role', 'status');
                announcement.setAttribute('aria-live', 'polite');
                announcement.textContent = `${tabName} 탭이 선택되었습니다`;
                
                document.body.appendChild(announcement);
                setTimeout(() => announcement.remove(), 1000);
            }
        },

        /**
         * Lazy loading for images
         */
        lazyLoad: {
            init() {
                if ('IntersectionObserver' in window) {
                    const imageObserver = new IntersectionObserver((entries, observer) => {
                        entries.forEach(entry => {
                            if (entry.isIntersecting) {
                                const img = entry.target;
                                img.src = img.dataset.src;
                                img.classList.remove('lazy');
                                observer.unobserve(img);
                            }
                        });
                    });

                    elements.lazyImages = document.querySelectorAll('img.lazy');
                    elements.lazyImages.forEach(img => imageObserver.observe(img));
                } else {
                    // Fallback for older browsers
                    const lazyImages = document.querySelectorAll('img.lazy');
                    lazyImages.forEach(img => {
                        img.src = img.dataset.src;
                        img.classList.remove('lazy');
                    });
                }
            }
        },

        /**
         * Smooth scroll for anchor links
         */
        smoothScroll: {
            init() {
                document.addEventListener('click', (e) => {
                    if (e.target.matches('a[href^="#"]')) {
                        e.preventDefault();
                        const targetId = e.target.getAttribute('href');
                        const targetElement = document.querySelector(targetId);
                        
                        if (targetElement) {
                            const headerHeight = elements.header ? elements.header.offsetHeight : 0;
                            const targetPosition = targetElement.offsetTop - headerHeight - 20;
                            
                            window.scrollTo({
                                top: targetPosition,
                                behavior: 'smooth'
                            });
                            
                            // Update focus for accessibility
                            targetElement.setAttribute('tabindex', '-1');
                            targetElement.focus();
                        }
                    }
                });
            }
        }
    };

    // Analytics module
    const analytics = {
        /**
         * Track page view
         */
        trackPageView() {
            if (typeof gtag !== 'undefined') {
                gtag('event', 'page_view', {
                    page_path: window.location.pathname,
                    page_title: document.title
                });
            }
        },

        /**
         * Track events
         */
        trackEvent(category, action, label = null, value = null) {
            if (typeof gtag !== 'undefined') {
                gtag('event', action, {
                    event_category: category,
                    event_label: label,
                    value: value
                });
            }
        },

        /**
         * Initialize click tracking
         */
        initClickTracking() {
            document.addEventListener('click', (e) => {
                // Track outbound links
                if (e.target.matches('a[href^="http"]') && !e.target.href.includes(window.location.hostname)) {
                    this.trackEvent('Outbound Link', 'click', e.target.href);
                }
                
                // Track button clicks
                if (e.target.matches('.btn')) {
                    this.trackEvent('Button', 'click', e.target.textContent);
                }
                
                // Track service card clicks
                if (e.target.closest('.service-card')) {
                    const card = e.target.closest('.service-card');
                    this.trackEvent('Service Card', 'click', card.querySelector('.service-card__name').textContent);
                }
            });
        }
    };

    // Public API
    return {
        /**
         * Initialize the application
         */
        init() {
            // Cache DOM elements
            elements.header = document.querySelector('.header');
            elements.mobileMenuBtn = document.querySelector('.header__menu-toggle');
            elements.nav = document.querySelector('.nav');
            elements.tabButtons = document.querySelectorAll('[role="tab"]');
            elements.skipLink = document.querySelector('.skip-link');

            // Initialize components
            components.header.init();
            components.mobileMenu.init();
            components.tabs.init();
            components.lazyLoad.init();
            components.smoothScroll.init();

            // Initialize analytics
            analytics.trackPageView();
            analytics.initClickTracking();

            // Performance monitoring
            this.initPerformanceMonitoring();

            // Error handling
            this.initErrorHandling();

            console.log('DohaApp initialized successfully');
        },

        /**
         * Performance monitoring
         */
        initPerformanceMonitoring() {
            if ('PerformanceObserver' in window) {
                // Monitor Largest Contentful Paint
                try {
                    const lcpObserver = new PerformanceObserver((list) => {
                        const entries = list.getEntries();
                        const lastEntry = entries[entries.length - 1];
                        console.log('LCP:', lastEntry.startTime);
                        analytics.trackEvent('Performance', 'LCP', null, Math.round(lastEntry.startTime));
                    });
                    lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });
                } catch (e) {
                    console.error('LCP Observer error:', e);
                }

                // Monitor First Input Delay
                try {
                    const fidObserver = new PerformanceObserver((list) => {
                        for (const entry of list.getEntries()) {
                            const delay = entry.processingStart - entry.startTime;
                            console.log('FID:', delay);
                            analytics.trackEvent('Performance', 'FID', null, Math.round(delay));
                        }
                    });
                    fidObserver.observe({ entryTypes: ['first-input'] });
                } catch (e) {
                    console.error('FID Observer error:', e);
                }
            }
        },

        /**
         * Global error handling
         */
        initErrorHandling() {
            window.addEventListener('error', (e) => {
                console.error('Global error:', e.message, e.filename, e.lineno, e.colno);
                analytics.trackEvent('Error', 'JavaScript Error', e.message);
            });

            window.addEventListener('unhandledrejection', (e) => {
                console.error('Unhandled promise rejection:', e.reason);
                analytics.trackEvent('Error', 'Promise Rejection', e.reason);
            });
        },

        // Expose utilities for external use
        utils,
        analytics
    };
})();

// Initialize when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => DohaApp.init());
} else {
    DohaApp.init();
}

// Export for module systems
if (typeof module !== 'undefined' && module.exports) {
    module.exports = DohaApp;
}