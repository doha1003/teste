{
        "@context": "https://schema.org",
        "@type": "WebApplication",
        "name": "BMI Í≥ÑÏÇ∞Í∏∞",
        "alternateName": "Ï≤¥ÏßàÎüâÏßÄÏàò Í≥ÑÏÇ∞Í∏∞",
        "url": "https://doha.kr/tools/bmi-calculator.html",
        "description": "ÌÇ§ÏôÄ Î™∏Î¨¥Í≤åÎ°ú BMI(Ï≤¥ÏßàÎüâÏßÄÏàò)Î•º Í≥ÑÏÇ∞ÌïòÍ≥† Í±¥Í∞ï ÏÉÅÌÉúÎ•º ÌôïÏù∏ÌïòÎäî Î¨¥Î£å ÎèÑÍµ¨",
        "applicationCategory": "HealthApplication",
        "operatingSystem": "Any",
        "offers": {
            "@type": "Offer",
            "price": "0",
            "priceCurrency": "KRW"
        },
        "aggregateRating": {
            "@type": "AggregateRating",
            "ratingValue": "4.9",
            "ratingCount": "2840"
        },
        "featureList": [
            "Ïã§ÏãúÍ∞Ñ BMI Í≥ÑÏÇ∞",
            "Í±¥Í∞ï ÏÉÅÌÉú Î∂ÑÏÑù", 
            "ÌëúÏ§Ä Ï≤¥Ï§ë Ï†úÏãú",
            "ÎßûÏ∂§Ìòï Í±¥Í∞ï Ï°∞Ïñ∏",
            "WHO ÏïÑÏãúÏïÑ-ÌÉúÌèâÏñë Í∏∞Ï§Ä Ï†ÅÏö©"
        ]
    }

window.addEventListener('load', function() {
        if (window.performance && window.performance.timing) {
            const loadTime = window.performance.timing.loadEventEnd - window.performance.timing.navigationStart;
            if (loadTime > 5000) {
                console.warn('Page loading is slow:', loadTime + 'ms');
            }
        }
    });

if ('IntersectionObserver' in window) {
    const adObserver = new IntersectionObserver(function(entries) {
        entries.forEach(function(entry) {
            if (entry.isIntersecting) {
                const container = entry.target;
                container.innerHTML = `<ins class="adsbygoogle"
                 style="display:block"
                 data-ad-client="ca-pub-7905640648499222"
                 data-ad-slot="8912541604"
                 data-ad-format="auto"
                 data-full-width-responsive="true"></ins>`;
                if (typeof adsbygoogle !== 'undefined') {
                    (adsbygoogle = window.adsbygoogle || []).push({});
                }
                adObserver.unobserve(container);
            }
        });
    }, { rootMargin: '50px' });
    
    const adContainer = document.getElementById('ad-container-rittcsgv5');
    if (adContainer) {
        adObserver.observe(adContainer);
    }
}

try {
            if (typeof Kakao !== 'undefined' && window.API_CONFIG && window.API_CONFIG.KAKAO_JS_KEY) {
                if (!Kakao.isInitialized()) {
                    Kakao.init(window.API_CONFIG.KAKAO_JS_KEY);
                    console.log('Kakao SDK initialized successfully');
                }
            }
        } catch (error) {
            console.warn('Kakao SDK initialization failed:', error);
        }

function validateInput(value, min, max, fieldName) {
            if (!value || value.trim() === '') {
                alert(`${fieldName}ÏùÑ(Î•º) ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.`);
                return null;
            }
            
            const num = parseFloat(value);
            
            if (isNaN(num) || num < min || num > max) {
                alert(`${fieldName}ÏùÄ(Îäî) ${min}ÏóêÏÑú ${max} ÏÇ¨Ïù¥Î°ú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.`);
                return null;
            }
            return num;
        }
        
        function calculateBMI() {
            console.log("BMI calculation started");

            const heightInput = document.getElementById('height').value;
            const weightInput = document.getElementById('weight').value;
            const ageInput = document.getElementById('age').value;
            
            const height = validateInput(heightInput, 100, 250, 'ÌÇ§');
            const weight = validateInput(weightInput, 20, 300, 'Î™∏Î¨¥Í≤å');
            const age = ageInput ? validateInput(ageInput, 1, 120, 'ÎÇòÏù¥') : 25; // ÎÇòÏù¥Îäî ÏÑ†ÌÉùÏÇ¨Ìï≠
            
            if (!height || !weight) {
                return;
            }
            
            const gender = document.querySelector('input[name="gender"]:checked').value;

            const heightInMeters = height / 100;
            const bmi = weight / (heightInMeters * heightInMeters);
            const roundedBMI = Math.round(bmi * 10) / 10;

            let standardWeight;
            if (gender === 'male') {
                standardWeight = (height - 100) * 0.9;
            } else {
                standardWeight = (height - 100) * 0.85;
            }
            const weightDifference = weight - standardWeight;

            let status, statusColor, description, personalizedAdvice;
            if (bmi < 18.5) {
                status = 'Ï≤¥Ï§ë Í¥ÄÎ¶¨Í∞Ä ÌïÑÏöîÌï¥Ïöî';
                statusColor = 'var(--primary-color)';
                description = 'Ï°∞Í∏à Îçî Í±¥Í∞ïÌïú Ï≤¥Ï§ëÏùÑ ÏúÑÌï¥ ÏòÅÏñëÍ∞Ä ÏûàÎäî ÏãùÏÇ¨Ïóê Ïã†Í≤Ω Ïç®Î≥¥ÏÑ∏Ïöî. Ï≤úÏ≤úÌûà Í±¥Í∞ïÌïòÍ≤å ÎäòÎ†§ÎÇòÍ∞ÄÎ©¥ Îê©ÎãàÎã§! üí™';
                personalizedAdvice = getUnderweightAdvice(gender, age);
            } else if (bmi < 23) {
                status = 'ÏôÑÎ≤ΩÌï¥Ïöî! ‚ú®';
                statusColor = 'var(--success-color)';
                description = 'Ï†ïÎßê Î©ãÏßÑ Ï≤¥Ï§ëÏùÑ Ïú†ÏßÄÌïòÍ≥† Í≥ÑÏãúÎÑ§Ïöî! ÏßÄÍ∏àÏùò Í±¥Í∞ïÌïú ÏäµÍ¥ÄÏùÑ Í≥ÑÏÜç Ïù¥Ïñ¥Í∞ÄÏãúÎ©¥ Îê©ÎãàÎã§. üëè';
                personalizedAdvice = getNormalAdvice(gender, age);
            } else if (bmi < 25) {
                status = 'Ï°∞Í∏à Í¥ÄÎ¶¨Í∞Ä ÌïÑÏöîÌï¥Ïöî';
                statusColor = 'var(--accent-color)';
                description = 'Í±±Ï†ïÌïòÏßÄ ÎßàÏÑ∏Ïöî! ÏûëÏùÄ Î≥ÄÌôîÎ∂ÄÌÑ∞ ÏãúÏûëÌïòÎ©¥ Ï∂©Î∂ÑÌûà Í∞úÏÑ†Ìï† Ïàò ÏûàÏñ¥Ïöî. Ìï®Íªò Í±¥Í∞ïÌïú ÏäµÍ¥ÄÏùÑ ÎßåÎì§Ïñ¥ÎÇòÍ∞ÄÏöî. üåü';
                personalizedAdvice = getOverweightAdvice(gender, age);
            } else if (bmi < 30) {
                status = 'Í±¥Í∞ï Í¥ÄÎ¶¨Ïóê Ïã†Í≤ΩÏç®Ï£ºÏÑ∏Ïöî';
                statusColor = 'var(--error-color)';
                description = 'ÌòºÏûêÏÑú ÌûòÎì§Ïñ¥ÌïòÏßÄ ÎßàÏÑ∏Ïöî. Ï†ÑÎ¨∏Í∞ÄÏùò ÎèÑÏõÄÏùÑ Î∞õÏúºÎ©¥ Îçî ÏïàÏ†ÑÌïòÍ≥† Ìö®Í≥ºÏ†ÅÏúºÎ°ú Í±¥Í∞ïÏùÑ ÎêòÏ∞æÏùÑ Ïàò ÏûàÏñ¥Ïöî. ü§ù';
                personalizedAdvice = getObeseAdvice(gender, age);
            } else {
                status = 'Ï†ÑÎ¨∏Í∞ÄÏôÄ Ìï®ÍªòÌïòÎäî Ïó¨Ï†ï';
                statusColor = '#dc2626';
                description = 'ÏßÄÍ∏àÏù¥ Í±¥Í∞ïÌïú Î≥ÄÌôîÎ•º ÏãúÏûëÌï† ÏôÑÎ≤ΩÌïú ÏãúÍ∏∞ÏòàÏöî. ÏùòÎ£åÏßÑÍ≥º ÏÉÅÎã¥ÌïòÏó¨ Ï≤¥Í≥ÑÏ†ÅÏù∏ Í¥ÄÎ¶¨ Í≥ÑÌöçÏùÑ ÏÑ∏ÏõåÎ≥¥ÏÑ∏Ïöî. üíù';
                personalizedAdvice = getSevereObeseAdvice(gender, age);
            }

            document.getElementById('bmiValue').textContent = roundedBMI;
            document.getElementById('bmiStatus').textContent = status;
            document.getElementById('bmiStatus').style.color = statusColor;
            document.getElementById('bmiDescription').textContent = description;

            const announcement = `BMI Í≥ÑÏÇ∞ Í≤∞Í≥º: ${roundedBMI}, ÏÉÅÌÉú: ${status}. ${description}`;
            document.getElementById('bmiAnnouncement').textContent = announcement;
            
            document.getElementById('standardWeight').textContent = `${Math.round(standardWeight * 10) / 10}kg`;
            document.getElementById('weightDiff').textContent = 
                weightDifference > 0 ? `+${Math.round(weightDifference * 10) / 10}kg` : 
                `${Math.round(weightDifference * 10) / 10}kg`;
            document.getElementById('weightDiff').style.color = 
                Math.abs(weightDifference) < 5 ? 'var(--success-color)' : 'var(--error-color)';

            let pointerPosition;
            if (bmi < 18.5) {
                pointerPosition = (bmi / 18.5) * 18.5;
            } else if (bmi < 23) {
                pointerPosition = 18.5 + ((bmi - 18.5) / 4.5) * 6.5;
            } else if (bmi < 25) {
                pointerPosition = 25 + ((bmi - 23) / 2) * 5;
            } else if (bmi < 30) {
                pointerPosition = 30 + ((bmi - 25) / 5) * 5;
            } else {
                pointerPosition = Math.min(35 + ((bmi - 30) / 10) * 65, 100);
            }
            
            document.getElementById('chartPointer').style.left = `${pointerPosition}%`;
            document.getElementById('chartValue').textContent = roundedBMI;

            showPersonalizedAdvice(personalizedAdvice, status);

            const resultSection = document.getElementById('resultSection');
            console.log("Showing result section", resultSection);
            if (resultSection) {
                resultSection.classList.remove('hidden');
                resultSection.style.display = 'block';
            }
            document.getElementById('bmiChart').classList.remove('hidden');

            document.getElementById('resultSection').scrollIntoView({ 
                behavior: 'smooth', 
                block: 'center' 
            });
        }

        function showPersonalizedAdvice(advice, status) {
            const adviceSection = document.getElementById('personalizedAdvice');
            const adviceTitle = document.getElementById('adviceTitle');
            const adviceSubtitle = document.getElementById('adviceSubtitle');
            const adviceGrid = document.getElementById('adviceGrid');
            
            adviceTitle.textContent = `${status} ÏÉÅÌÉúÏù∏ ÎãπÏã†ÏùÑ ÏúÑÌïú ÎßûÏ∂§ Ï°∞Ïñ∏`;
            adviceSubtitle.textContent = advice.subtitle;

            adviceGrid.innerHTML = '';
            advice.cards.forEach((card, index) => {
                const cardElement = document.createElement('div');
                let cardType = '';
                if (index % 3 === 0) cardType = 'diet';
                else if (index % 3 === 1) cardType = 'exercise';
                else cardType = 'lifestyle';
                
                cardElement.className = `bmi-advice-card ${cardType}`;

                const iconSpan = document.createElement('span');
                iconSpan.className = 'bmi-advice-card-icon';
                iconSpan.textContent = card.icon;
                
                const titleH3 = document.createElement('h3');
                titleH3.className = 'bmi-advice-card-title';
                titleH3.textContent = card.title;
                
                const contentDiv = document.createElement('div');
                contentDiv.className = 'bmi-advice-card-content';
                const contentP = document.createElement('p');
                contentP.textContent = card.description;
                contentDiv.appendChild(contentP);
                
                cardElement.appendChild(iconSpan);
                cardElement.appendChild(titleH3);
                cardElement.appendChild(contentDiv);
                adviceGrid.appendChild(cardElement);
            });
            
            adviceSection.style.display = 'block';
        }

        function getUnderweightAdvice(gender, age) {
            return {
                subtitle: 'Í±¥Í∞ïÌïòÍ≥† ÏïÑÎ¶ÑÎã§Ïö¥ Ï≤¥Ï§ëÏùÑ ÏúÑÌïú Îî∞ÎúªÌïú Ï°∞Ïñ∏Ïù¥ÏóêÏöî. Î¨¥ÏóáÎ≥¥Îã§ ÏûêÏã†ÏùÑ ÏÇ¨ÎûëÌïòÎäî ÎßàÏùåÏúºÎ°ú Ï≤úÏ≤úÌûà Í±¥Í∞ïÌï¥Ï†∏ Í∞ÄÏÑ∏Ïöî! üíù',
                cards: [
                    {
                        icon: 'üçØ',
                        title: 'ÏπºÎ°úÎ¶¨ Î∞ÄÎèÑ ÎÜíÏùÄ ÏùåÏãù',
                        description: 'Í≤¨Í≥ºÎ•ò, ÏïÑÎ≥¥Ïπ¥ÎèÑ, Ïò¨Î¶¨Î∏åÏò§Ïùº, ÍøÄ Îì± Í±¥Í∞ïÌïú Í≥†ÏπºÎ°úÎ¶¨ ÏùåÏãùÏùÑ ÏÑ≠Ï∑®ÌïòÏÑ∏Ïöî. ÌïòÎ£® 500-1000ÏπºÎ°úÎ¶¨Î•º Ï∂îÍ∞ÄÎ°ú ÏÑ≠Ï∑®ÌïòÎäî Í≤ÉÏù¥ Î™©ÌëúÏûÖÎãàÎã§.'
                    },
                    {
                        icon: 'ü•§',
                        title: 'Í±¥Í∞ïÌïú Í∞ÑÏãùÍ≥º ÏùåÎ£å',
                        description: 'ÏãùÏÇ¨ ÏÇ¨Ïù¥ÏÇ¨Ïù¥Ïóê ÌîÑÎ°úÌã¥ ÏÖ∞Ïù¥ÌÅ¨, Í≤¨Í≥ºÎ•ò, Î∞îÎÇòÎÇò Îì±ÏùÑ ÏÑ≠Ï∑®ÌïòÏÑ∏Ïöî. Î¨º ÎåÄÏã† Ïö∞Ïú†ÎÇò 100% Í≥ºÏùºÏ£ºÏä§ÎèÑ Ï¢ãÏùÄ ÏπºÎ°úÎ¶¨ Í≥µÍ∏âÏõêÏûÖÎãàÎã§.'
                    },
                    {
                        icon: 'üí™',
                        title: 'Í∑ºÎ†• Ïö¥Îèô Ï§ëÏã¨',
                        description: 'Ïú†ÏÇ∞ÏÜåÎ≥¥Îã§Îäî Í∑ºÎ†• Ïö¥ÎèôÏóê ÏßëÏ§ëÌïòÏÑ∏Ïöî. Í∑ºÏú°ÎüâÏùÑ ÎäòÎ¶¨Î©¥ Í±¥Í∞ïÌïú Î∞©ÏãùÏúºÎ°ú Ï≤¥Ï§ëÏùÑ Ï¶ùÍ∞ÄÏãúÌÇ¨ Ïàò ÏûàÏäµÎãàÎã§.'
                    },
                    {
                        icon: 'üë®‚Äç‚öïÔ∏è',
                        title: 'ÏùòÌïôÏ†Å Í≤ÄÏÇ¨',
                        description: 'Í∞ëÏÉÅÏÑ† Í∏∞Îä•Ìï≠ÏßÑÏ¶ù, ÎãπÎá®Î≥ë Îì± Ï†ÄÏ≤¥Ï§ëÏùò ÏõêÏù∏Ïù¥ Îê† Ïàò ÏûàÎäî ÏßàÌôòÏù¥ ÏûàÎäîÏßÄ Í≤ÄÏÇ¨Î∞õÏïÑÎ≥¥ÏÑ∏Ïöî.'
                    },
                    {
                        icon: 'üò¥',
                        title: 'Ï∂©Î∂ÑÌïú Ìú¥Ïãù',
                        description: 'Ïä§Ìä∏Î†àÏä§ÏôÄ ÏàòÎ©¥ Î∂ÄÏ°±ÏùÄ Ï≤¥Ï§ë Í∞êÏÜåÏùò ÏõêÏù∏Ïù¥ Îê©ÎãàÎã§. ÌïòÎ£® 8ÏãúÍ∞Ñ Ïù¥ÏÉÅ Ï∂©Î∂ÑÌûà Ïû†ÏùÑ ÏûêÏÑ∏Ïöî.'
                    },
                    {
                        icon: 'üìà',
                        title: 'Ï†êÏßÑÏ†Å Ï¶ùÍ∞Ä',
                        description: 'Ìïú Îã¨Ïóê 1-2kgÏî© Ï≤úÏ≤úÌûà Ï≤¥Ï§ëÏùÑ ÎäòÎ†§Í∞ÄÏÑ∏Ïöî. Í∏âÍ≤©Ìïú Ï≤¥Ï§ë Ï¶ùÍ∞ÄÎäî Ïò§ÌûàÎ†§ Í±¥Í∞ïÏóê Ìï¥Î°úÏö∏ Ïàò ÏûàÏäµÎãàÎã§.'
                    }
                ]
            };
        }

        function getNormalAdvice(gender, age) {
            return {
                subtitle: 'ÌòÑÏû¨ Í±¥Í∞ïÌïú Ï≤¥Ï§ëÏùÑ Ïú†ÏßÄÌïòÍ≥† Í≥ÑÏãúÎÑ§Ïöî! Ïù¥ ÏÉÅÌÉúÎ•º Íæ∏Ï§ÄÌûà Ïú†ÏßÄÌïòÎäî Í≤ÉÏù¥ Í∞ÄÏû• Ï§ëÏöîÌï¥Ïöî. üåü',
                cards: [
                    {
                        icon: '‚öñÔ∏è',
                        title: 'ÌòÑÏû¨ ÏÉÅÌÉú Ïú†ÏßÄ',
                        description: 'ÏßÄÍ∏àÏùò ÏãùÏäµÍ¥ÄÍ≥º Ïö¥Îèô ÏäµÍ¥ÄÏùÑ Í≥ÑÏÜç Ïú†ÏßÄÌïòÏÑ∏Ïöî. ÏûëÏùÄ Î≥ÄÌôîÎùºÎèÑ Íæ∏Ï§ÄÌï®Ïù¥ Í∞ÄÏû• Ï§ëÏöîÌï©ÎãàÎã§.'
                    },
                    {
                        icon: 'ü•ó',
                        title: 'Í∑†ÌòïÏû°Ìûå ÏãùÎã®',
                        description: 'Îã§ÏñëÌïú ÏòÅÏñëÏÜåÎ•º Í≥®Í≥†Î£® ÏÑ≠Ï∑®ÌïòÍ≥†, Í∞ÄÍ≥µÏãùÌíàÎ≥¥Îã§Îäî ÏûêÏó∞ÏãùÌíàÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.'
                    },
                    {
                        icon: 'üèÉ‚Äç‚ôÄÔ∏è',
                        title: 'Íæ∏Ï§ÄÌïú Ïö¥Îèô',
                        description: 'Ï£º 3-4ÌöåÏùò Ïú†ÏÇ∞ÏÜå Ïö¥ÎèôÍ≥º Ï£º 2ÌöåÏùò Í∑ºÎ†• Ïö¥ÎèôÏúºÎ°ú Í±¥Í∞ïÌïú Î™∏ÏùÑ Ïú†ÏßÄÌïòÏÑ∏Ïöî.'
                    },
                    {
                        icon: 'üìä',
                        title: 'Ï†ïÍ∏∞Ï†ÅÏù∏ Ï≤¥ÌÅ¨',
                        description: 'Ïõî 1Ìöå Ï†ïÎèÑ Ï≤¥Ï§ëÏùÑ ÌôïÏù∏ÌïòÍ≥†, Ïó∞ 1Ìöå Í±¥Í∞ïÍ≤ÄÏßÑÏùÑ ÌÜµÌï¥ Ï†ÑÎ∞òÏ†ÅÏù∏ Í±¥Í∞ï ÏÉÅÌÉúÎ•º Ï†êÍ≤ÄÌïòÏÑ∏Ïöî.'
                    },
                    {
                        icon: 'üßò‚Äç‚ôÄÔ∏è',
                        title: 'Ïä§Ìä∏Î†àÏä§ Í¥ÄÎ¶¨',
                        description: 'Ïä§Ìä∏Î†àÏä§Îäî Ï≤¥Ï§ë Î≥ÄÌôîÏùò Ï£ºÏöî ÏõêÏù∏ÏûÖÎãàÎã§. Ï∑®ÎØ∏ ÌôúÎèôÏù¥ÎÇò Î™ÖÏÉÅÏúºÎ°ú ÎßàÏùåÏùò Í±¥Í∞ïÎèÑ Ï±ôÍ∏∞ÏÑ∏Ïöî.'
                    },
                    {
                        icon: 'üíß',
                        title: 'Ï∂©Î∂ÑÌïú ÏàòÎ∂Ñ',
                        description: 'ÌïòÎ£® 8Ïûî Ïù¥ÏÉÅÏùò Î¨ºÏùÑ ÎßàÏãúÍ≥†, Ïπ¥ÌéòÏù∏Ïù¥ÎÇò ÎãπÎ∂ÑÏù¥ ÎßéÏùÄ ÏùåÎ£åÎäî Ï§ÑÏù¥ÏÑ∏Ïöî.'
                    }
                ]
            };
        }

        function getOverweightAdvice(gender, age) {
            return {
                subtitle: 'ÏûëÏùÄ Î≥ÄÌôîÎßåÏúºÎ°úÎèÑ ÌÅ∞ Í∞úÏÑ†ÏùÑ Ïù¥Î£∞ Ïàò ÏûàÏñ¥Ïöî! Î¨¥Î¶¨ÌïòÏßÄ ÎßêÍ≥† Ï≤úÏ≤úÌûà Í±¥Í∞ïÌïú ÏäµÍ¥ÄÏùÑ ÎßåÎì§Ïñ¥Í∞ÄÏÑ∏Ïöî. üí™',
                cards: [
                    {
                        icon: 'üçΩÔ∏è',
                        title: 'Ï†ÅÎãπÌïú ÏπºÎ°úÎ¶¨ Ï†úÌïú',
                        description: 'ÌïòÎ£® 300-500ÏπºÎ°úÎ¶¨ Ï†ïÎèÑ Ï§ÑÏó¨Î≥¥ÏÑ∏Ïöî. Í∑πÎã®Ï†ÅÏù∏ Îã§Ïù¥Ïñ¥Ìä∏Î≥¥Îã§Îäî Ï†êÏßÑÏ†ÅÏù∏ Î≥ÄÌôîÍ∞Ä Ìö®Í≥ºÏ†ÅÏûÖÎãàÎã§.'
                    },
                    {
                        icon: 'üö∂‚Äç‚ôÄÔ∏è',
                        title: 'ÏùºÏÉÅ ÌôúÎèô ÎäòÎ¶¨Í∏∞',
                        description: 'ÏóòÎ¶¨Î≤†Ïù¥ÌÑ∞ ÎåÄÏã† Í≥ÑÎã® Ïù¥Ïö©ÌïòÍ∏∞, Ìïú Ï†ïÍ±∞Ïû• ÏùºÏ∞ç ÎÇ¥Î†§ÏÑú Í±∑Í∏∞ Îì± ÏûëÏùÄ Î≥ÄÌôîÎ∂ÄÌÑ∞ ÏãúÏûëÌïòÏÑ∏Ïöî.'
                    },
                    {
                        icon: 'ü•¨',
                        title: 'ÏãùÏù¥ÏÑ¨Ïú† ÎäòÎ¶¨Í∏∞',
                        description: 'Ï±ÑÏÜå, Í≥ºÏùº, ÌÜµÍ≥°Î¨ºÏùÑ ÎäòÎ¶¨Í≥† Ìè¨ÌôîÏßÄÎ∞©Ïù¥ ÎßéÏùÄ ÏùåÏãùÏùÄ Ï§ÑÏù¥ÏÑ∏Ïöî. Ìè¨ÎßåÍ∞êÏùÑ Ïò§Îûò Ïú†ÏßÄÌï† Ïàò ÏûàÏäµÎãàÎã§.'
                    },
                    {
                        icon: '‚è∞',
                        title: 'Í∑úÏπôÏ†ÅÏù∏ ÏãùÏÇ¨',
                        description: 'ÌïòÎ£® 3ÎÅºÎ•º Í∑úÏπôÏ†ÅÏúºÎ°ú ÎìúÏãúÍ≥†, ÏïºÏãùÏùÄ ÌîºÌïòÏÑ∏Ïöî. Îä¶ÏùÄ ÏãúÍ∞Ñ ÏãùÏÇ¨Îäî Ï≤¥Ï§ë Ï¶ùÍ∞ÄÏùò ÏõêÏù∏Ïù¥ Îê©ÎãàÎã§.'
                    },
                    {
                        icon: 'üèä‚Äç‚ôÄÔ∏è',
                        title: 'Ïú†ÏÇ∞ÏÜå Ïö¥Îèô',
                        description: 'Ï£º 4-5Ìöå, 30-40Î∂Ñ Ï†ïÎèÑÏùò Ïú†ÏÇ∞ÏÜå Ïö¥ÎèôÏùÑ ÏãúÏûëÌïòÏÑ∏Ïöî. Í±∑Í∏∞, ÏàòÏòÅ, ÏûêÏ†ÑÍ±∞ ÌÉÄÍ∏∞ Îì±Ïù¥ Ï¢ãÏäµÎãàÎã§.'
                    },
                    {
                        icon: 'üìù',
                        title: 'ÏãùÏÇ¨ ÏùºÍ∏∞',
                        description: 'Î¨¥ÏóáÏùÑ Ïñ∏Ï†ú ÏñºÎßàÎÇò Î®πÏóàÎäîÏßÄ Í∏∞Î°ùÌï¥Î≥¥ÏÑ∏Ïöî. Ìå®ÌÑ¥ÏùÑ ÌååÏïÖÌïòÎ©¥ Í∞úÏÑ†Ï†êÏùÑ Ï∞æÍ∏∞ ÏâΩÏäµÎãàÎã§.'
                    }
                ]
            };
        }

        function getObeseAdvice(gender, age) {
            return {
                subtitle: 'ÏßÄÍ∏àÏù¥ Í±¥Í∞ïÌïú Î≥ÄÌôîÎ•º ÏãúÏûëÌï† ÏôÑÎ≤ΩÌïú ÏãúÍ∏∞ÏòàÏöî! Ï†ÑÎ¨∏Í∞ÄÏôÄ Ìï®Íªò Ï≤¥Í≥ÑÏ†ÅÏúºÎ°ú Í¥ÄÎ¶¨Ìï¥ÎÇòÍ∞ÄÏÑ∏Ïöî. üåà',
                cards: [
                    {
                        icon: 'üë©‚Äç‚öïÔ∏è',
                        title: 'Ï†ÑÎ¨∏Í∞Ä ÏÉÅÎã¥',
                        description: 'ÏùòÏÇ¨ÎÇò ÏòÅÏñëÏÇ¨ÏôÄ ÏÉÅÎã¥ÌïòÏó¨ Í∞úÏù∏ ÎßûÏ∂§Ìòï Í≥ÑÌöçÏùÑ ÏÑ∏Ïö∞ÏÑ∏Ïöî. ÏïàÏ†ÑÌïòÍ≥† Ìö®Í≥ºÏ†ÅÏù∏ Î∞©Î≤ïÏùÑ Ï∞æÏùÑ Ïàò ÏûàÏäµÎãàÎã§.'
                    },
                    {
                        icon: 'üìâ',
                        title: 'Ï†êÏßÑÏ†Å Ï≤¥Ï§ë Í∞êÎüâ',
                        description: 'Ìïú Îã¨Ïóê 2-4kg Ï†ïÎèÑÏùò Ï†êÏßÑÏ†Å Í∞êÎüâÏùÑ Î™©ÌëúÎ°ú ÌïòÏÑ∏Ïöî. Í∏âÍ≤©Ìïú Í∞êÎüâÏùÄ ÏöîÏöîÌòÑÏÉÅÏùÑ ÏùºÏúºÌÇ¨ Ïàò ÏûàÏäµÎãàÎã§.'
                    },
                    {
                        icon: 'ü•ô',
                        title: 'ÏãùÎã® Ï°∞Ï†à',
                        description: 'ÏπºÎ°úÎ¶¨Îäî Ï§ÑÏù¥Îêò ÌïÑÏàò ÏòÅÏñëÏÜåÎäî Ï∂©Î∂ÑÌûà ÏÑ≠Ï∑®ÌïòÏÑ∏Ïöî. Îã®Î∞±Ïßà, ÎπÑÌÉÄÎØº, ÎØ∏ÎÑ§ÎûÑÏù¥ Î∂ÄÏ°±ÌïòÏßÄ ÏïäÎèÑÎ°ù Ï£ºÏùòÌïòÏÑ∏Ïöî.'
                    },
                    {
                        icon: 'üö¥‚Äç‚ôÄÔ∏è',
                        title: 'Ï†ÄÍ∞ïÎèÑ Ïö¥Îèô',
                        description: 'Í¥ÄÏ†àÏóê Î¨¥Î¶¨Í∞Ä Í∞ÄÏßÄ ÏïäÎäî ÏàòÏòÅ, Ïã§ÎÇ¥ ÏûêÏ†ÑÍ±∞ Îì±Î∂ÄÌÑ∞ ÏãúÏûëÌïòÏÑ∏Ïöî. Ïö¥ÎèôÎüâÏùÄ Ï†êÏ∞® ÎäòÎ†§Í∞ÄÏÑ∏Ïöî.'
                    },
                    {
                        icon: 'ü©∫',
                        title: 'Í±¥Í∞ï ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ',
                        description: 'ÌòàÏïï, ÌòàÎãπ, ÏΩúÎ†àÏä§ÌÖåÎ°§ ÏàòÏπòÎ•º Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú ÌôïÏù∏ÌïòÏÑ∏Ïöî. ÎèôÎ∞ò ÏßàÌôò ÏòàÎ∞©Ïù¥ Ï§ëÏöîÌï©ÎãàÎã§.'
                    },
                    {
                        icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
                        title: 'Í∞ÄÏ°±Ïùò ÏßÄÏßÄ',
                        description: 'Í∞ÄÏ°±Í≥º ÏπúÍµ¨Îì§Ïùò ÏùëÏõêÍ≥º ÏßÄÏßÄÎ•º Î∞õÏúºÏÑ∏Ïöî. Ìï®Íªò Í±¥Í∞ïÌïú ÏãùÏäµÍ¥ÄÏùÑ ÎßåÎì§Ïñ¥Í∞ÄÎ©¥ Îçî ÏàòÏõîÌï©ÎãàÎã§.'
                    }
                ]
            };
        }

        function getSevereObeseAdvice(gender, age) {
            return {
                subtitle: 'Ï†ÑÎ¨∏Ï†ÅÏù∏ ÎèÑÏõÄÏù¥ ÌïÑÏöîÌïú ÏÉÅÌô©Ïù¥ÏóêÏöî. ÏùòÎ£åÏßÑÍ≥º Ìï®Íªò ÏïàÏ†ÑÌïòÍ≥† Ï≤¥Í≥ÑÏ†ÅÏù∏ Í¥ÄÎ¶¨ Í≥ÑÌöçÏùÑ ÏÑ∏ÏõåÎ≥¥ÏÑ∏Ïöî. üíô',
                cards: [
                    {
                        icon: 'üè•',
                        title: 'ÏùòÎ£åÏßÑ ÏÉÅÎã¥ ÌïÑÏàò',
                        description: 'ÎπÑÎßå Ï†ÑÎ¨∏Ïùò, ÎÇ¥Î∂ÑÎπÑÎÇ¥Í≥º Ï†ÑÎ¨∏ÏùòÏôÄ ÏÉÅÎã¥ÌïòÏÑ∏Ïöî. ÎèôÎ∞ò ÏßàÌôò Í≤ÄÏÇ¨ÏôÄ ÏπòÎ£å Í≥ÑÌöç ÏàòÎ¶ΩÏù¥ Ïö∞ÏÑ†ÏûÖÎãàÎã§.'
                    },
                    {
                        icon: 'üíä',
                        title: 'ÏïΩÎ¨º ÏπòÎ£å Í≥†Î†§',
                        description: 'ÌïÑÏöîÏãú ÏùòÏÇ¨ÏôÄ ÏÉÅÎã¥ÌïòÏó¨ ÏïàÏ†ÑÌïú ÎπÑÎßå ÏπòÎ£åÏ†ú ÏÇ¨Ïö©ÏùÑ Í≥†Î†§Ìï¥Î≥¥ÏÑ∏Ïöî. Ï†ÑÎ¨∏Ïùò ÏßÄÎèÑÌïòÏóê ÏÇ¨Ïö©Ìï¥Ïïº Ìï©ÎãàÎã§.'
                    },
                    {
                        icon: 'üçé',
                        title: 'ÏòÅÏñë Í¥ÄÎ¶¨',
                        description: 'ÏòÅÏñëÏÇ¨ÏôÄ Ìï®Íªò Í∞úÏù∏ ÎßûÏ∂§ ÏãùÎã®ÏùÑ Í≥ÑÌöçÌïòÏÑ∏Ïöî. Í∑πÎã®Ï†ÅÏù∏ Ï†úÌïúÎ≥¥Îã§Îäî Í∑†ÌòïÏû°Ìûå Í∞êÎüâ ÏãùÎã®Ïù¥ Ï§ëÏöîÌï©ÎãàÎã§.'
                    },
                    {
                        icon: 'üßò‚Äç‚ôÇÔ∏è',
                        title: 'Ï†ïÏã† Í±¥Í∞ï ÏºÄÏñ¥',
                        description: 'Ïä§Ìä∏Î†àÏä§ÎÇò Ïö∞Ïö∏Í∞êÏù¥ Í≥ºÏãùÏùò ÏõêÏù∏Ïùº Ïàò ÏûàÏäµÎãàÎã§. ÌïÑÏöîÏãú Ïã¨Î¶¨ ÏÉÅÎã¥ÎèÑ Î∞õÏïÑÎ≥¥ÏÑ∏Ïöî.'
                    },
                    {
                        icon: 'üìä',
                        title: 'Ï†ïÍ∏∞Ï†ÅÏù∏ Î™®ÎãàÌÑ∞ÎßÅ',
                        description: 'Ï≤¥Ï§ë, ÌòàÏïï, ÌòàÎãπ Îì±ÏùÑ Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú Ï≤¥ÌÅ¨ÌïòÍ≥†, ÏßÑÎ£åÎ•º ÌÜµÌï¥ ÏßÑÌñâ ÏÉÅÌô©ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.'
                    },
                    {
                        icon: 'üéØ',
                        title: 'ÌòÑÏã§Ï†ÅÏù∏ Î™©Ìëú',
                        description: 'Ï≤òÏùåÏóêÎäî 5-10% Ï≤¥Ï§ë Í∞êÎüâÏùÑ Î™©ÌëúÎ°ú ÌïòÏÑ∏Ïöî. ÏûëÏùÄ ÏÑ±Í≥µÏù¥ ÌÅ∞ Î≥ÄÌôîÏùò ÏãúÏûëÏù¥ Îê©ÎãàÎã§.'
                    }
                ]
            };
        }

        document.addEventListener('DOMContentLoaded', function() {

            const calculateBtn = document.getElementById('calculateBtn');
            if (calculateBtn) {
                calculateBtn.addEventListener('click', calculateBMI);
            }

            const inputs = document.querySelectorAll('.bmi-input-field');
            inputs.forEach(input => {
                input.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        calculateBMI();
                    }
                });
            });
        });

(adsbygoogle = window.adsbygoogle || []).push({});

window.addEventListener('load', function() {
    setTimeout(function() {
        var adsScript = document.createElement('script');
        adsScript.src = 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7905640648499222';
        adsScript.crossOrigin = 'anonymous';
        adsScript.defer = true;
        document.head.appendChild(adsScript);
    }, 2000);
});

window.adsenseInitialized = window.adsenseInitialized || false;

function initializeAdSense() {
    if (window.adsenseInitialized) {
        console.log('AdSense already initialized');
        return;
    }
    
    window.adsenseInitialized = true;

    const adBlocks = document.querySelectorAll('.adsbygoogle');
    adBlocks.forEach((ad, index) => {
        if (!ad.dataset.adsbygoogleStatus) {
            try {
                (adsbygoogle = window.adsbygoogle || []).push({});
                console.log('AdSense block initialized:', index);
            } catch (error) {
                console.warn('AdSense initialization error:', error);
            }
        }
    });
}

window.addEventListener('load', function() {
    setTimeout(initializeAdSense, 1000);
});

(function() {
    'use strict';

    window.__adsenseLoaded = window.__adsenseLoaded || false;
    window.__adsenseQueue = window.__adsenseQueue || [];
    
    function initAdsense() {
        if (window.__adsenseLoaded) return;
        
        const ads = document.querySelectorAll('.adsbygoogle:not([data-adsbygoogle-status])');
        
        if (ads.length === 0) return;

        if (typeof adsbygoogle === 'undefined') {
            setTimeout(initAdsense, 500);
            return;
        }
        
        window.__adsenseLoaded = true;

        ads.forEach((ad, index) => {
            try {

                if (ad.getAttribute('data-adsbygoogle-status')) return;

                (adsbygoogle = window.adsbygoogle || []).push({});

                ad.setAttribute('data-adsbygoogle-status', 'done');
                
            } catch (e) {
                console.warn('AdSense Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', index, e.message);
            }
        });
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(initAdsense, 1000);
        });
    } else {
        setTimeout(initAdsense, 1000);
    }

    window.addEventListener('error', function(e) {
        if (e.message && e.message.includes('adsbygoogle.push() error')) {
            e.preventDefault();
            console.warn('AdSense Ï§ëÎ≥µ Ï¥àÍ∏∞Ìôî Î∞©ÏßÄÎê®');
            return false;
        }
    }, true);
})();

(function() {
    'use strict';

    if (window.__adsenseFullyInitialized) return;
    window.__adsenseFullyInitialized = true;

    let originalPush = null;

    function safeInitAds() {
        const ads = document.querySelectorAll('.adsbygoogle');
        
        if (ads.length === 0) return;

        if (typeof adsbygoogle === 'undefined') {
            setTimeout(safeInitAds, 200);
            return;
        }

        if (!originalPush && window.adsbygoogle && window.adsbygoogle.push) {
            originalPush = window.adsbygoogle.push;
            
            window.adsbygoogle.push = function(config) {
                try {

                    const hasAds = Array.from(document.querySelectorAll('.adsbygoogle')).every(el => 
                        el.getAttribute('data-adsbygoogle-status') === 'done'
                    );
                    
                    if (hasAds) {
                        console.log('Î™®Îì† Í¥ëÍ≥† Ïä¨Î°ØÏù¥ Ïù¥ÎØ∏ Ï±ÑÏõåÏßê');
                        return;
                    }

                    return originalPush.call(this, config);
                } catch (e) {
                    console.warn('AdSense push Ï∞®Îã®Îê®:', e.message);
                }
            };
        }

        let initialized = 0;
        ads.forEach((ad) => {
            if (!ad.getAttribute('data-adsbygoogle-status')) {
                try {
                    (adsbygoogle = window.adsbygoogle || []).push({});
                    initialized++;
                } catch (e) {

                }
            }
        });
        
        console.log('AdSense Ï¥àÍ∏∞Ìôî ÏôÑÎ£å:', initialized, 'Í∞ú Ïä¨Î°Ø');
    }

    const errorHandler = function(e) {
        if (e.message && e.message.includes('adsbygoogle.push() error')) {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            return false;
        }
    };

    window.addEventListener('error', errorHandler, true);

    window.addEventListener('unhandledrejection', function(e) {
        if (e.reason && e.reason.message && e.reason.message.includes('adsbygoogle')) {
            e.preventDefault();
            return false;
        }
    });

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(safeInitAds, 1000);
        });
    } else {
        setTimeout(safeInitAds, 1000);
    }
})();

// ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î∞è Ìë∏ÌÑ∞ Î°úÎìú - main.jsÏùò loadComponentsÍ∞Ä Ïã§ÌñâÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞Î•º ÏúÑÌïú Ìè¥Î∞±
document.addEventListener('DOMContentLoaded', function() {
    // main.jsÍ∞Ä Î°úÎìúÎêòÏóàÍ≥† loadComponents Ìï®ÏàòÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
    if (typeof loadComponents === 'function') {
        // main.jsÏùò DOMContentLoadedÍ∞Ä Ïù¥ÎØ∏ Ïã§ÌñâÎêòÏóàÏùÑ Ïàò ÏûàÏúºÎØÄÎ°ú 
        // navbar-placeholderÍ∞Ä ÎπÑÏñ¥ÏûàÏúºÎ©¥ Îã§Ïãú Ïã§Ìñâ
        const navPlaceholder = document.getElementById('navbar-placeholder');
        const footerPlaceholder = document.getElementById('footer-placeholder');
        
        if ((navPlaceholder && !navPlaceholder.innerHTML.trim()) || 
            (footerPlaceholder && !footerPlaceholder.innerHTML.trim())) {
            console.log('Loading components...');
            loadComponents().catch(function(error) {
                console.error('Failed to load components:', error);
            });
        }
    }
});