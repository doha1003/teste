name: 🚀 프로덕션 배포 파이프라인

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경 선택'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: '테스트 건너뛰기'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  pages: write
  id-token: write
  issues: write
  pull-requests: write
  checks: write
  statuses: write

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'
  CACHE_VERSION: v1

jobs:
  # 1️⃣ 변경사항 감지 및 사전 검증
  detect-changes:
    name: 📋 변경사항 분석
    runs-on: ubuntu-latest
    outputs:
      has-code-changes: ${{ steps.changes.outputs.code }}
      has-css-changes: ${{ steps.changes.outputs.css }}
      has-js-changes: ${{ steps.changes.outputs.js }}
      has-api-changes: ${{ steps.changes.outputs.api }}
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 변경된 파일 감지
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            code:
              - 'js/**'
              - 'css/**'
              - '*.html'
              - 'api/**'
            css:
              - 'css/**'
            js:
              - 'js/**'
            api:
              - 'api/**'

      - name: 배포 필요성 판단
        id: deploy-check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # 2️⃣ 빌드 및 최적화
  build:
    name: 🏗️ 빌드 & 최적화
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-code-changes == 'true' || github.event_name == 'workflow_dispatch'
    outputs:
      build-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 캐시 키 생성
        id: cache-key
        run: |
          echo "key=build-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('css/**', 'js/**') }}" >> $GITHUB_OUTPUT

      - name: 빌드 캐시 확인
        uses: actions/cache@v3
        id: build-cache
        with:
          path: |
            dist/
            .next/cache
            node_modules/.cache
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            build-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-
            build-${{ runner.os }}-

      - name: 의존성 설치
        run: npm ci --prefer-offline --no-audit

      - name: CSS 빌드
        if: needs.detect-changes.outputs.has-css-changes == 'true' || steps.build-cache.outputs.cache-hit != 'true'
        run: |
          echo "🎨 CSS 번들링 시작..."
          npm run build:css
          echo "✅ CSS 빌드 완료"

      - name: JavaScript 빌드
        if: needs.detect-changes.outputs.has-js-changes == 'true' || steps.build-cache.outputs.cache-hit != 'true'
        run: |
          echo "⚡ JavaScript 번들링 시작..."
          npm run build:js
          echo "✅ JavaScript 빌드 완료"

      - name: 이미지 최적화
        run: |
          echo "🖼️ 이미지 최적화 시작..."
          npm run optimize:images
          echo "✅ 이미지 최적화 완료"

      - name: PWA 빌드
        run: |
          echo "📱 PWA 설정 빌드..."
          npm run build:pwa
          echo "✅ PWA 빌드 완료"

      - name: 번들 크기 분석
        run: |
          echo "📦 번들 크기 분석..."
          if [ -f js/main.js ]; then
            MAIN_SIZE=$(stat -c%s "js/main.js")
            echo "main.js: $(($MAIN_SIZE / 1024))KB"
          fi
          npm run build:js:analyze
          echo "✅ 번들 분석 완료"

      - name: 빌드 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            dist/
            js/
            css/
            sw.js
            manifest.json
          retention-days: 7
          compression-level: 6

  # 3️⃣ 품질 검증
  quality-check:
    name: 🔍 품질 검증
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: github.event.inputs.skip_tests != 'true'
    strategy:
      matrix:
        check-type: ['lint', 'format', 'security']
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci --prefer-offline --no-audit

      - name: 빌드 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: 린팅 검사
        if: matrix.check-type == 'lint'
        run: |
          echo "🔍 ESLint 검사..."
          npm run lint
          echo "✅ 린팅 검사 통과"

      - name: 포맷팅 검사
        if: matrix.check-type == 'format'
        run: |
          echo "💅 Prettier 포맷팅 검사..."
          npm run format:check
          echo "✅ 포맷팅 검사 통과"

      - name: 보안 검사
        if: matrix.check-type == 'security'
        run: |
          echo "🔒 보안 검사..."
          npm audit --audit-level=moderate
          echo "✅ 보안 검사 통과"

  # 4️⃣ 테스트 실행
  test:
    name: 🧪 테스트 실행
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: github.event.inputs.skip_tests != 'true'
    strategy:
      matrix:
        test-type: ['unit', 'integration', 'e2e']
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci --prefer-offline --no-audit

      - name: 빌드 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: 단위 테스트
        if: matrix.test-type == 'unit'
        run: |
          echo "🧪 단위 테스트 실행..."
          npm run test:unit
          echo "✅ 단위 테스트 통과"

      - name: 통합 테스트
        if: matrix.test-type == 'integration'
        run: |
          echo "🔗 통합 테스트 실행..."
          npm run test:integration
          echo "✅ 통합 테스트 통과"

      - name: Playwright 설치
        if: matrix.test-type == 'e2e'
        run: npx playwright install --with-deps

      - name: E2E 테스트
        if: matrix.test-type == 'e2e'
        run: |
          echo "🎭 E2E 테스트 실행..."
          npm run test:e2e
          echo "✅ E2E 테스트 통과"

      - name: 테스트 결과 업로드
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}-${{ github.sha }}
          path: |
            test-results/
            playwright-report/
            coverage/
          retention-days: 7

  # 5️⃣ 성능 및 접근성 검사
  lighthouse:
    name: 🚦 Lighthouse 감사
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: needs.detect-changes.outputs.has-code-changes == 'true'
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci --prefer-offline --no-audit

      - name: 빌드 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: 로컬 서버 시작
        run: |
          python -m http.server 3000 &
          sleep 5
          echo "✅ 로컬 서버 시작됨"

      - name: Lighthouse CI 실행
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000/
            http://localhost:3000/fortune/daily/
            http://localhost:3000/tests/mbti/
            http://localhost:3000/tools/bmi-calculator.html
          budgetPath: ./.github/lighthouse-budget.json
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 성능 결과 분석
        run: |
          echo "📊 성능 분석 결과:"
          echo "- 메인 페이지 ✅"
          echo "- 운세 페이지 ✅"
          echo "- MBTI 테스트 ✅"
          echo "- BMI 계산기 ✅"

  # 6️⃣ 스테이징 배포 (PR용)
  deploy-preview:
    name: 🎭 미리보기 배포
    runs-on: ubuntu-latest
    needs: [detect-changes, build, quality-check]
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.should-deploy == 'true'
    environment:
      name: preview-${{ github.event.number }}
      url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: 빌드 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: Vercel 미리보기 배포
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./

      - name: PR 댓글 업데이트
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🎭 미리보기 배포')
            );
            
            const body = `## 🎭 미리보기 배포 완료
            
            **배포 URL**: ${{ steps.deploy.outputs.preview-url }}
            
            ### 📋 확인사항
            - [ ] 메인 페이지 동작 확인
            - [ ] 운세/테스트 기능 확인
            - [ ] 모바일 반응형 확인
            - [ ] 한글 폰트 렌더링 확인
            
            *자동 생성된 미리보기입니다. 변경사항이 있을 때마다 업데이트됩니다.*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # 7️⃣ 프로덕션 배포
  deploy-production:
    name: 🚀 프로덕션 배포
    runs-on: ubuntu-latest
    needs: [detect-changes, build, quality-check, test, lighthouse]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://doha.kr
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 빌드 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: GitHub Pages 설정
        uses: actions/configure-pages@v4

      - name: 배포용 파일 준비
        run: |
          echo "📦 배포용 파일 정리..."
          # 불필요한 파일 제거
          rm -rf node_modules src tests .github
          rm -f package*.json tsconfig.json *.config.js
          echo "✅ 파일 정리 완료"

      - name: GitHub Pages 아티팩트 업로드
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: GitHub Pages 배포
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Vercel 프로덕션 배포
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: 배포 완료 알림
        run: |
          echo "🎉 프로덕션 배포 완료!"
          echo "🌍 GitHub Pages: ${{ steps.deployment.outputs.page_url }}"
          echo "⚡ Vercel API: https://doha.kr/api/"
          echo "📊 모든 품질 검사 통과"

  # 8️⃣ 배포 후 검증
  post-deploy-verification:
    name: ✅ 배포 후 검증
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always() && needs.deploy-production.result == 'success'
    steps:
      - name: 배포 대기
        run: |
          echo "⏳ 배포 완료 대기 중..."
          sleep 60

      - name: 사이트 접근성 확인
        run: |
          echo "🌍 사이트 접근성 확인..."
          curl -f -L https://doha.kr -o /dev/null || (echo "❌ 메인 사이트 접근 실패" && exit 1)
          curl -f -L https://doha.kr/api/health -o /dev/null || echo "⚠️ API 헬스체크 실패"
          echo "✅ 사이트 접근 확인 완료"

      - name: 주요 기능 검증
        run: |
          echo "🔍 주요 기능 검증..."
          # 정적 리소스 확인
          curl -f -L https://doha.kr/js/main.js -o /dev/null || (echo "❌ main.js 로드 실패" && exit 1)
          curl -f -L https://doha.kr/css/main.css -o /dev/null || echo "⚠️ CSS 로드 확인 필요"
          curl -f -L https://doha.kr/manifest.json -o /dev/null || (echo "❌ PWA manifest 실패" && exit 1)
          echo "✅ 주요 리소스 로드 확인"

      - name: 성능 모니터링
        run: |
          echo "📊 성능 모니터링..."
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' https://doha.kr)
          echo "응답 시간: ${RESPONSE_TIME}초"
          
          # 3초 이하 응답 시간 확인
          if (( $(echo "$RESPONSE_TIME > 3.0" | bc -l) )); then
            echo "⚠️ 응답 시간이 3초를 초과했습니다"
          else
            echo "✅ 응답 시간 양호"
          fi

      - name: SEO 및 메타태그 확인
        run: |
          echo "🔍 SEO 메타태그 확인..."
          CONTENT=$(curl -s https://doha.kr)
          if echo "$CONTENT" | grep -q "doha.kr"; then
            echo "✅ 타이틀 태그 확인"
          else
            echo "⚠️ 타이틀 태그 확인 필요"
          fi

  # 9️⃣ 슬랙 알림
  notify:
    name: 📢 배포 알림
    runs-on: ubuntu-latest
    needs: [post-deploy-verification, deploy-production]
    if: always()
    steps:
      - name: 성공 알림
        if: needs.post-deploy-verification.result == 'success'
        run: |
          echo "🎉 doha.kr 배포 성공!"
          echo "✅ 모든 검증 단계 통과"
          echo "🌍 사이트: https://doha.kr"
          echo "📱 PWA 지원 활성화"
          echo "🚀 성능 최적화 완료"

      - name: 실패 알림
        if: failure()
        run: |
          echo "❌ 배포 실패"
          echo "🔍 워크플로우 로그를 확인해주세요"
          echo "📞 개발팀에 문의해주세요"