name: 🚀 프로덕션 배포 파이프라인

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/ci.yml'
      - '.github/workflows/security-*.yml'
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경 선택'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: '테스트 건너뛰기'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  pages: write
  id-token: write
  issues: write
  pull-requests: write
  checks: write
  statuses: write

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'
  CACHE_VERSION: v1

jobs:
  # 1️⃣ 변경사항 감지 및 사전 검증
  detect-changes:
    name: 📋 변경사항 분석
    runs-on: ubuntu-latest
    outputs:
      has-code-changes: ${{ steps.changes.outputs.code }}
      has-css-changes: ${{ steps.changes.outputs.css }}
      has-js-changes: ${{ steps.changes.outputs.js }}
      has-api-changes: ${{ steps.changes.outputs.api }}
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 변경된 파일 감지
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            code:
              - 'js/**'
              - 'css/**'
              - '*.html'
              - 'api/**'
            css:
              - 'css/**'
            js:
              - 'js/**'
            api:
              - 'api/**'

      - name: 배포 필요성 판단
        id: deploy-check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # 2️⃣ 빌드 및 최적화
  build:
    name: 🏗️ 빌드 & 최적화
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-code-changes == 'true' || github.event_name == 'workflow_dispatch'
    outputs:
      build-cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 캐시 키 생성
        id: cache-key
        run: |
          echo "key=build-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('css/**', 'js/**') }}" >> $GITHUB_OUTPUT

      - name: 빌드 캐시 확인
        uses: actions/cache@v3
        id: build-cache
        with:
          path: |
            dist/
            .next/cache
            node_modules/.cache
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            build-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-
            build-${{ runner.os }}-

      - name: 의존성 설치
        run: npm ci --prefer-offline --no-audit

      - name: CSS 빌드
        if: needs.detect-changes.outputs.has-css-changes == 'true' || steps.build-cache.outputs.cache-hit != 'true'
        run: |
          echo "🎨 CSS 번들링 시작..."
          npm run build:css
          echo "✅ CSS 빌드 완료"

      - name: JavaScript 빌드
        if: needs.detect-changes.outputs.has-js-changes == 'true' || steps.build-cache.outputs.cache-hit != 'true'
        run: |
          echo "⚡ JavaScript 번들링 시작..."
          npm run build:js
          echo "✅ JavaScript 빌드 완료"

      - name: 이미지 최적화
        run: |
          echo "🖼️ 이미지 최적화 시작..."
          npm run optimize:images
          echo "✅ 이미지 최적화 완료"

      - name: PWA 빌드
        run: |
          echo "📱 PWA 설정 빌드..."
          if [ -f "build-pwa.cjs" ]; then
            npm run build:pwa
            echo "✅ PWA 빌드 완료"
          else
            echo "⚠️ PWA 빌드 스크립트 없음 - 기본 검증만 수행"
            # 필수 PWA 파일 확인
            if [ ! -f "manifest.json" ]; then
              echo "❌ manifest.json 파일이 필요합니다"
              exit 1
            fi
            if [ ! -f "sw.js" ]; then
              echo "❌ sw.js 파일이 필요합니다"
              exit 1
            fi
            echo "✅ PWA 기본 파일 확인 완료"
          fi

      - name: 번들 크기 분석
        run: |
          echo "📦 번들 크기 분석..."
          if [ -f js/main.js ]; then
            MAIN_SIZE=$(stat -c%s "js/main.js")
            echo "main.js: $(($MAIN_SIZE / 1024))KB"
          fi
          npm run build:js:analyze
          echo "✅ 번들 분석 완료"

      - name: 빌드 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            dist/
            js/
            css/
            sw.js
            manifest.json
          retention-days: 7
          compression-level: 6

  # 3️⃣ 품질 검증
  quality-check:
    name: 🔍 품질 검증
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: github.event.inputs.skip_tests != 'true'
    strategy:
      matrix:
        check-type: ['lint', 'format', 'security']
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci --prefer-offline --no-audit

      - name: 빌드 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: 린팅 검사
        if: matrix.check-type == 'lint'
        run: |
          echo "🔍 ESLint 검사..."
          npm run lint
          echo "✅ 린팅 검사 통과"

      - name: 포맷팅 검사
        if: matrix.check-type == 'format'
        run: |
          echo "💅 Prettier 포맷팅 검사..."
          npm run format:check
          echo "✅ 포맷팅 검사 통과"

      - name: 보안 검사
        if: matrix.check-type == 'security'
        run: |
          echo "🔒 보안 검사..."
          npm audit --audit-level=moderate
          echo "✅ 보안 검사 통과"

  # 4️⃣ 테스트 실행
  test:
    name: 🧪 테스트 실행
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: github.event.inputs.skip_tests != 'true'
    strategy:
      matrix:
        test-type: ['unit', 'integration', 'e2e']
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci --prefer-offline --no-audit

      - name: 빌드 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: 단위 테스트
        if: matrix.test-type == 'unit'
        run: |
          echo "🧪 단위 테스트 실행..."
          npm run test:unit
          echo "✅ 단위 테스트 통과"

      - name: 통합 테스트
        if: matrix.test-type == 'integration'
        run: |
          echo "🔗 통합 테스트 실행..."
          npm run test:integration
          echo "✅ 통합 테스트 통과"

      - name: Playwright 설치
        if: matrix.test-type == 'e2e'
        run: npx playwright install --with-deps

      - name: E2E 테스트
        if: matrix.test-type == 'e2e'
        run: |
          echo "🎭 E2E 테스트 실행..."
          npm run test:e2e
          echo "✅ E2E 테스트 통과"

      - name: 테스트 결과 업로드
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}-${{ github.sha }}
          path: |
            test-results/
            playwright-report/
            coverage/
          retention-days: 7

  # 5️⃣ 성능 및 접근성 검사
  lighthouse:
    name: 🚦 Lighthouse 감사
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: needs.detect-changes.outputs.has-code-changes == 'true'
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci --prefer-offline --no-audit

      - name: 빌드 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: 로컬 서버 시작
        run: |
          python -m http.server 3000 &
          sleep 5
          echo "✅ 로컬 서버 시작됨"

      - name: Lighthouse CI 실행
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000/
            http://localhost:3000/fortune/daily/
            http://localhost:3000/tests/mbti/
            http://localhost:3000/tools/bmi-calculator.html
          budgetPath: ./.github/lighthouse-budget.json
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 성능 결과 분석
        run: |
          echo "📊 성능 분석 결과:"
          echo "- 메인 페이지 ✅"
          echo "- 운세 페이지 ✅"
          echo "- MBTI 테스트 ✅"
          echo "- BMI 계산기 ✅"

  # 6️⃣ 스테이징 배포 (PR용)
  deploy-preview:
    name: 🎭 미리보기 배포
    runs-on: ubuntu-latest
    needs: [detect-changes, build, quality-check]
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.should-deploy == 'true'
    environment:
      name: preview-${{ github.event.number }}
      url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: 빌드 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: Vercel 미리보기 배포
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./

      - name: PR 댓글 업데이트
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🎭 미리보기 배포')
            );
            
            const body = `## 🎭 미리보기 배포 완료
            
            **배포 URL**: ${{ steps.deploy.outputs.preview-url }}
            
            ### 📋 확인사항
            - [ ] 메인 페이지 동작 확인
            - [ ] 운세/테스트 기능 확인
            - [ ] 모바일 반응형 확인
            - [ ] 한글 폰트 렌더링 확인
            
            *자동 생성된 미리보기입니다. 변경사항이 있을 때마다 업데이트됩니다.*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # 7️⃣ 블루-그린 배포 준비
  prepare-blue-green:
    name: 🔄 블루-그린 배포 준비
    runs-on: ubuntu-latest
    needs: [detect-changes, build, quality-check, test, lighthouse]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    outputs:
      current-env: ${{ steps.determine-env.outputs.current }}
      target-env: ${{ steps.determine-env.outputs.target }}
      blue-url: ${{ steps.determine-env.outputs.blue-url }}
      green-url: ${{ steps.determine-env.outputs.green-url }}
    steps:
      - name: 현재 활성 환경 확인
        id: determine-env
        run: |
          # 현재 프로덕션이 어느 환경인지 확인
          CURRENT_RESPONSE=$(curl -s -f -m 10 "https://doha.kr/api/health" || echo "none")
          
          if echo "$CURRENT_RESPONSE" | grep -q "blue"; then
            echo "current=blue" >> $GITHUB_OUTPUT
            echo "target=green" >> $GITHUB_OUTPUT
            echo "blue-url=https://doha.kr" >> $GITHUB_OUTPUT
            echo "green-url=https://doha-green.vercel.app" >> $GITHUB_OUTPUT
          elif echo "$CURRENT_RESPONSE" | grep -q "green"; then
            echo "current=green" >> $GITHUB_OUTPUT
            echo "target=blue" >> $GITHUB_OUTPUT
            echo "blue-url=https://doha-blue.vercel.app" >> $GITHUB_OUTPUT
            echo "green-url=https://doha.kr" >> $GITHUB_OUTPUT
          else
            # 첫 배포 또는 감지 실패시 blue로 설정
            echo "current=none" >> $GITHUB_OUTPUT
            echo "target=blue" >> $GITHUB_OUTPUT
            echo "blue-url=https://doha-blue.vercel.app" >> $GITHUB_OUTPUT
            echo "green-url=https://doha-green.vercel.app" >> $GITHUB_OUTPUT
          fi
          
          echo "🔍 현재 환경: $(cat $GITHUB_OUTPUT | grep current= | cut -d= -f2)"
          echo "🎯 타겟 환경: $(cat $GITHUB_OUTPUT | grep target= | cut -d= -f2)"

  # 8️⃣ 타겟 환경 배포
  deploy-target-environment:
    name: 🚀 타겟 환경 배포
    runs-on: ubuntu-latest
    needs: prepare-blue-green
    environment:
      name: production-${{ needs.prepare-blue-green.outputs.target-env }}
      url: ${{ needs.prepare-blue-green.outputs.target-env == 'blue' && needs.prepare-blue-green.outputs.blue-url || needs.prepare-blue-green.outputs.green-url }}
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 빌드 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}

      - name: GitHub Pages 설정
        uses: actions/configure-pages@v4

      - name: 배포용 파일 준비
        run: |
          echo "📦 배포용 파일 정리..."
          # 불필요한 파일 제거
          rm -rf node_modules src tests .github
          rm -f package*.json tsconfig.json *.config.js
          echo "✅ 파일 정리 완료"

      - name: GitHub Pages 아티팩트 업로드
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: 타겟 환경 변수 설정
        run: |
          echo "DEPLOY_ENV=${{ needs.prepare-blue-green.outputs.target-env }}" >> $GITHUB_ENV
          echo "TARGET_URL=${{ needs.prepare-blue-green.outputs.target-env == 'blue' && needs.prepare-blue-green.outputs.blue-url || needs.prepare-blue-green.outputs.green-url }}" >> $GITHUB_ENV

      - name: GitHub Pages 배포 (정적 자산)
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Vercel 타겟 환경 배포
        id: vercel-deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: '--prod --meta deployEnv=${{ needs.prepare-blue-green.outputs.target-env }}'
          working-directory: ./

      - name: 배포 완료 알림
        run: |
          echo "🎉 ${{ needs.prepare-blue-green.outputs.target-env }} 환경 배포 완료!"
          echo "🌍 GitHub Pages: ${{ steps.deployment.outputs.page_url }}"
          echo "⚡ Vercel URL: ${{ steps.vercel-deploy.outputs.preview-url }}"
          echo "🎯 타겟 환경: ${{ needs.prepare-blue-green.outputs.target-env }}"
          echo "📊 모든 품질 검사 통과"

  # 9️⃣ 타겟 환경 검증
  verify-target-environment:
    name: ✅ 타겟 환경 검증
    runs-on: ubuntu-latest
    needs: [prepare-blue-green, deploy-target-environment]
    outputs:
      health-check: ${{ steps.health.outputs.status }}
      performance-check: ${{ steps.performance.outputs.status }}
      functional-check: ${{ steps.functional.outputs.status }}
    steps:
      - name: 배포 완료 대기
        run: |
          echo "⏳ 타겟 환경 배포 완료 대기..."
          sleep 30

      - name: 헬스체크
        id: health
        run: |
          TARGET_URL="${{ needs.prepare-blue-green.outputs.target-env == 'blue' && needs.prepare-blue-green.outputs.blue-url || needs.prepare-blue-green.outputs.green-url }}"
          echo "🏥 타겟 환경 헬스체크: $TARGET_URL"
          
          # 헬스체크 재시도 로직
          for i in {1..5}; do
            if curl -f -s -m 10 "$TARGET_URL/api/health" > /dev/null; then
              echo "status=success" >> $GITHUB_OUTPUT
              echo "✅ 헬스체크 성공 (시도 $i)"
              break
            elif [ $i -eq 5 ]; then
              echo "status=failed" >> $GITHUB_OUTPUT
              echo "❌ 헬스체크 실패 (5회 시도 모두 실패)"
              exit 1
            else
              echo "⚠️ 헬스체크 실패 (시도 $i/5), 20초 후 재시도..."
              sleep 20
            fi
          done

      - name: 성능 검증
        id: performance
        run: |
          TARGET_URL="${{ needs.prepare-blue-green.outputs.target-env == 'blue' && needs.prepare-blue-green.outputs.blue-url || needs.prepare-blue-green.outputs.green-url }}"
          echo "⚡ 성능 검증: $TARGET_URL"
          
          # 응답 시간 측정
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' -m 10 "$TARGET_URL")
          echo "응답 시간: ${RESPONSE_TIME}초"
          
          # 성능 기준 확인 (3초 이하)
          if (( $(echo "$RESPONSE_TIME <= 3.0" | bc -l) )); then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "✅ 성능 검증 통과"
          else
            echo "status=warning" >> $GITHUB_OUTPUT
            echo "⚠️ 성능 경고: 응답시간 ${RESPONSE_TIME}초"
          fi

      - name: 기능 검증
        id: functional
        run: |
          TARGET_URL="${{ needs.prepare-blue-green.outputs.target-env == 'blue' && needs.prepare-blue-green.outputs.blue-url || needs.prepare-blue-green.outputs.green-url }}"
          echo "🔍 기능 검증: $TARGET_URL"
          
          # 주요 페이지 확인
          PAGES=("" "/fortune/daily/" "/tests/mbti/" "/tools/bmi-calculator.html")
          
          for PAGE in "${PAGES[@]}"; do
            if curl -f -s -m 10 "$TARGET_URL$PAGE" > /dev/null; then
              echo "✅ $PAGE 페이지 정상"
            else
              echo "❌ $PAGE 페이지 오류"
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
          done
          
          echo "status=success" >> $GITHUB_OUTPUT
          echo "✅ 모든 기능 검증 통과"

  # 🔟 트래픽 전환 (Blue-Green Switch)
  switch-traffic:
    name: 🔄 트래픽 전환
    runs-on: ubuntu-latest
    needs: [prepare-blue-green, verify-target-environment]
    if: |
      needs.verify-target-environment.outputs.health-check == 'success' &&
      needs.verify-target-environment.outputs.functional-check == 'success'
    environment:
      name: production
      url: https://doha.kr
    steps:
      - name: DNS 트래픽 전환 확인
        run: |
          echo "🔄 DNS 트래픽 전환 시작"
          echo "현재 환경: ${{ needs.prepare-blue-green.outputs.current-env }}"
          echo "타겟 환경: ${{ needs.prepare-blue-green.outputs.target-env }}"
          echo "📡 Cloudflare DNS 업데이트 필요"
          
      - name: CDN 캐시 무효화
        run: |
          echo "🗑️ CDN 캐시 무효화 시작"
          # Cloudflare API를 통한 캐시 퍼지
          if [ -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data '{"purge_everything":true}' || echo "⚠️ CDN 캐시 무효화 실패"
            echo "✅ CDN 캐시 무효화 완료"
          else
            echo "⚠️ Cloudflare API 토큰이 설정되지 않음"
          fi

      - name: 트래픽 전환 완료
        run: |
          echo "🎉 트래픽 전환 완료!"
          echo "🌍 활성 환경: ${{ needs.prepare-blue-green.outputs.target-env }}"
          echo "🚀 새 버전이 프로덕션에 배포되었습니다"

  # 1️⃣1️⃣ 최종 검증
  post-deploy-verification:
    name: ✅ 최종 검증
    runs-on: ubuntu-latest
    needs: [switch-traffic, prepare-blue-green]
    if: always() && needs.switch-traffic.result == 'success'
    steps:
      - name: 배포 대기
        run: |
          echo "⏳ 배포 완료 대기 중..."
          sleep 60

      - name: 프로덕션 사이트 최종 확인
        run: |
          echo "🌍 프로덕션 사이트 최종 확인..."
          # 메인 도메인 확인
          curl -f -L https://doha.kr -o /dev/null || (echo "❌ 메인 사이트 접근 실패" && exit 1)
          curl -f -L https://doha.kr/api/health -o /dev/null || echo "⚠️ API 헬스체크 실패"
          
          # 새 환경이 활성화되었는지 확인
          RESPONSE=$(curl -s https://doha.kr/api/health)
          if echo "$RESPONSE" | grep -q "${{ needs.prepare-blue-green.outputs.target-env }}"; then
            echo "✅ 새 환경(${{ needs.prepare-blue-green.outputs.target-env }})이 활성화됨"
          else
            echo "⚠️ 환경 전환 확인 필요"
          fi
          echo "✅ 사이트 최종 확인 완료"

      - name: 주요 기능 검증
        run: |
          echo "🔍 주요 기능 검증..."
          # 정적 리소스 확인
          curl -f -L https://doha.kr/js/main.js -o /dev/null || (echo "❌ main.js 로드 실패" && exit 1)
          curl -f -L https://doha.kr/css/main.css -o /dev/null || echo "⚠️ CSS 로드 확인 필요"
          curl -f -L https://doha.kr/manifest.json -o /dev/null || (echo "❌ PWA manifest 실패" && exit 1)
          echo "✅ 주요 리소스 로드 확인"

      - name: 성능 모니터링
        run: |
          echo "📊 성능 모니터링..."
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' https://doha.kr)
          echo "응답 시간: ${RESPONSE_TIME}초"
          
          # 3초 이하 응답 시간 확인
          if (( $(echo "$RESPONSE_TIME > 3.0" | bc -l) )); then
            echo "⚠️ 응답 시간이 3초를 초과했습니다"
          else
            echo "✅ 응답 시간 양호"
          fi

      - name: SEO 및 메타태그 확인
        run: |
          echo "🔍 SEO 메타태그 확인..."
          CONTENT=$(curl -s https://doha.kr)
          if echo "$CONTENT" | grep -q "doha.kr"; then
            echo "✅ 타이틀 태그 확인"
          else
            echo "⚠️ 타이틀 태그 확인 필요"
          fi

  # 1️⃣2️⃣ 롤백 대기
  rollback-standby:
    name: 🔙 롤백 대기
    runs-on: ubuntu-latest
    needs: [switch-traffic, prepare-blue-green, post-deploy-verification]
    if: failure() || needs.post-deploy-verification.result == 'failure'
    steps:
      - name: 롤백 준비
        run: |
          echo "🚨 배포 실패 감지! 롤백 준비 중..."
          echo "이전 환경: ${{ needs.prepare-blue-green.outputs.current-env }}"
          echo "실패한 환경: ${{ needs.prepare-blue-green.outputs.target-env }}"
          
      - name: 자동 롤백 실행
        run: |
          echo "🔙 자동 롤백 실행"
          # 이전 환경으로 DNS 되돌리기
          echo "📡 DNS를 이전 환경으로 복원"
          
          # CDN 캐시 무효화
          if [ -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data '{"purge_everything":true}'
            echo "✅ 롤백용 CDN 캐시 무효화 완료"
          fi
          
          echo "✅ 롤백 완료 - 이전 환경으로 복원됨"

  # 1️⃣3️⃣ 배포 알림
  notify:
    name: 📢 배포 알림
    runs-on: ubuntu-latest
    needs: [post-deploy-verification, switch-traffic, prepare-blue-green, rollback-standby]
    if: always()
    steps:
      - name: 성공 알림
        if: needs.post-deploy-verification.result == 'success' && needs.switch-traffic.result == 'success'
        run: |
          echo "🎉 doha.kr 블루-그린 배포 성공!"
          echo "✅ 모든 검증 단계 통과"
          echo "🌍 사이트: https://doha.kr"
          echo "🔄 활성 환경: ${{ needs.prepare-blue-green.outputs.target-env }}"
          echo "🚀 무중단 배포 완료"
          echo "📱 PWA 지원 활성화"
          echo "⚡ 성능 최적화 완료"
          echo "🛡️ 모든 보안 검사 통과"

      - name: 롤백 알림
        if: needs.rollback-standby.result == 'success'
        run: |
          echo "🔙 자동 롤백 완료"
          echo "⚠️ 배포 중 문제가 발생하여 이전 버전으로 복원되었습니다"
          echo "🔍 배포 로그를 확인해주세요"
          echo "🌍 현재 활성 환경: ${{ needs.prepare-blue-green.outputs.current-env }}"

      - name: 실패 알림
        if: failure() && needs.rollback-standby.result != 'success'
        run: |
          echo "❌ 배포 및 롤백 실패"
          echo "🚨 긴급 상황: 수동 개입이 필요합니다"
          echo "🔍 워크플로우 로그를 확인해주세요"
          echo "📞 개발팀에 즉시 문의해주세요"
          echo "🌍 현재 사이트 상태를 확인해주세요"