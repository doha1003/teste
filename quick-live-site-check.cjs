/**
 * doha.kr ÎùºÏù¥Î∏å ÏÇ¨Ïù¥Ìä∏ Îπ†Î•∏ Ï≤¥ÌÅ¨
 * Ï£ºÏöî ÌéòÏù¥ÏßÄÎì§Ïùò Í∏∞Î≥∏Ï†ÅÏù∏ Î¨∏Ï†úÏ†êÎßå Ïã†ÏÜçÌïòÍ≤å ÌôïÏù∏
 */

const { chromium } = require('playwright');
const fs = require('fs');
const path = require('path');

// Ïö∞ÏÑ†ÏàúÏúÑ ÎÜíÏùÄ ÌéòÏù¥ÏßÄÎì§
const PRIORITY_PAGES = [
  { url: 'https://doha.kr/', name: 'home', title: 'ÌôàÌéòÏù¥ÏßÄ' },
  { url: 'https://doha.kr/tests/', name: 'tests-index', title: 'Ïã¨Î¶¨ÌÖåÏä§Ìä∏ Î™©Î°ù' },
  { url: 'https://doha.kr/tests/mbti/', name: 'mbti-intro', title: 'MBTI ÌÖåÏä§Ìä∏ ÏÜåÍ∞ú' },
  { url: 'https://doha.kr/fortune/', name: 'fortune-index', title: 'AI Ïö¥ÏÑ∏ Î™©Î°ù' },
  { url: 'https://doha.kr/tools/', name: 'tools-index', title: 'Ïã§Ïö©ÎèÑÍµ¨ Î™©Î°ù' },
  { url: 'https://doha.kr/tools/text-counter.html', name: 'text-counter', title: 'Í∏ÄÏûêÏàò ÏÑ∏Í∏∞' }
];

class QuickLiveSiteChecker {
  constructor() {
    this.results = [];
    this.setupDirectories();
  }

  setupDirectories() {
    const reportDir = path.join(__dirname, 'quick-check-report');
    const screenshotsDir = path.join(reportDir, 'screenshots');
    
    [reportDir, screenshotsDir].forEach(dir => {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
    });
    
    this.reportDir = reportDir;
    this.screenshotsDir = screenshotsDir;
  }

  async checkSite() {
    console.log('üöÄ doha.kr ÎùºÏù¥Î∏å ÏÇ¨Ïù¥Ìä∏ Îπ†Î•∏ Ï≤¥ÌÅ¨ ÏãúÏûë...');
    
    const browser = await chromium.launch({ headless: false });
    
    try {
      for (const page of PRIORITY_PAGES) {
        console.log(`üîç Ï≤¥ÌÅ¨ Ï§ë: ${page.title}`);
        await this.checkPage(browser, page);
        
        // ÌéòÏù¥ÏßÄ Í∞Ñ ÎîúÎ†àÏù¥
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    } finally {
      await browser.close();
    }

    this.generateQuickReport();
    console.log(`\n‚úÖ Îπ†Î•∏ Ï≤¥ÌÅ¨ ÏôÑÎ£å! Í≤∞Í≥ºÎäî ${this.reportDir} Ìè¥ÎçîÏóêÏÑú ÌôïÏù∏ÌïòÏÑ∏Ïöî.`);
  }

  async checkPage(browser, pageInfo) {
    const context = await browser.newContext();
    const page = await context.newPage();

    try {
      // ÏßßÏùÄ ÌÉÄÏûÑÏïÑÏõÉÏúºÎ°ú Îπ†Î•¥Í≤å Ï≤¥ÌÅ¨
      await page.goto(pageInfo.url, { 
        waitUntil: 'domcontentloaded', 
        timeout: 10000 
      });

      // Ïû†Ïãú Í∏∞Îã§Î†§ÏÑú ÌéòÏù¥ÏßÄ Î°úÎî© ÏôÑÎ£å
      await page.waitForTimeout(2000);

      // Îç∞Ïä§ÌÅ¨ÌÜ± Ïä§ÌÅ¨Î¶∞ÏÉ∑
      await page.setViewportSize({ width: 1280, height: 720 });
      await page.waitForTimeout(500);
      await page.screenshot({
        path: path.join(this.screenshotsDir, `${pageInfo.name}-desktop.png`),
        fullPage: false // Î∑∞Ìè¨Ìä∏Îßå Ï∫°Ï≤òÌïòÏó¨ ÏÜçÎèÑ Ìñ•ÏÉÅ
      });

      // Î™®Î∞îÏùº Ïä§ÌÅ¨Î¶∞ÏÉ∑
      await page.setViewportSize({ width: 375, height: 667 });
      await page.waitForTimeout(500);
      await page.screenshot({
        path: path.join(this.screenshotsDir, `${pageInfo.name}-mobile.png`),
        fullPage: false
      });

      // Í∏∞Î≥∏Ï†ÅÏù∏ ÌéòÏù¥ÏßÄ Ï†ïÎ≥¥ ÏàòÏßë
      const pageData = await page.evaluate(() => {
        const issues = [];
        
        // 1. Í∏∞Î≥∏ SEO Ï≤¥ÌÅ¨
        if (!document.title) issues.push('ÌéòÏù¥ÏßÄ Ï†úÎ™©Ïù¥ ÏóÜÏäµÎãàÎã§.');
        if (!document.querySelector('meta[name="description"]')) {
          issues.push('meta descriptionÏù¥ ÏóÜÏäµÎãàÎã§.');
        }
        
        // 2. H1 Ï≤¥ÌÅ¨
        const h1s = document.querySelectorAll('h1');
        if (h1s.length === 0) issues.push('H1 ÌÉúÍ∑∏Í∞Ä ÏóÜÏäµÎãàÎã§.');
        if (h1s.length > 1) issues.push('H1 ÌÉúÍ∑∏Í∞Ä Ïó¨Îü¨ Í∞ú ÏûàÏäµÎãàÎã§.');
        
        // 3. Ïù¥ÎØ∏ÏßÄ alt Ï≤¥ÌÅ¨
        const imagesWithoutAlt = document.querySelectorAll('img:not([alt])');
        if (imagesWithoutAlt.length > 0) {
          issues.push(`${imagesWithoutAlt.length}Í∞ú Ïù¥ÎØ∏ÏßÄÏóê alt ÌÖçÏä§Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§.`);
        }
        
        // 4. ÎßÅÌÅ¨ Ï≤¥ÌÅ¨
        const emptyLinks = document.querySelectorAll('a:not([href]), a[href=""], a[href="#"]');
        if (emptyLinks.length > 0) {
          issues.push(`${emptyLinks.length}Í∞úÏùò Îπà ÎßÅÌÅ¨Í∞Ä ÏûàÏäµÎãàÎã§.`);
        }
        
        // 5. Í∏∞Î≥∏Ï†ÅÏù∏ Î†àÏù¥ÏïÑÏõÉ Î¨∏Ï†ú Ï≤¥ÌÅ¨
        const bodyWidth = document.body.scrollWidth;
        const viewportWidth = window.innerWidth;
        if (bodyWidth > viewportWidth * 1.1) {
          issues.push('ÏàòÌèâ Ïä§ÌÅ¨Î°§Ïù¥ Î∞úÏÉùÌï† Ïàò ÏûàÏäµÎãàÎã§.');
        }
        
        // 6. Ìè∞Ìä∏ Î°úÎî© Ï≤¥ÌÅ¨
        if (!document.fonts || document.fonts.status !== 'loaded') {
          issues.push('Ìè∞Ìä∏ Î°úÎî©Ïù¥ ÏôÑÎ£åÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        }
        
        // 7. ÏóêÎü¨ Î©îÏãúÏßÄ Ï≤¥ÌÅ¨
        const errorElements = document.querySelectorAll('.error, .alert-danger, [class*="error"]');
        if (errorElements.length > 0) {
          issues.push('ÌéòÏù¥ÏßÄÏóê ÏóêÎü¨ Î©îÏãúÏßÄÍ∞Ä ÌëúÏãúÎêòÍ≥† ÏûàÏäµÎãàÎã§.');
        }

        return {
          title: document.title,
          url: window.location.href,
          issues: issues,
          h1Count: h1s.length,
          h1Text: h1s[0]?.textContent || '',
          imageCount: document.querySelectorAll('img').length,
          linkCount: document.querySelectorAll('a[href]').length,
          buttonCount: document.querySelectorAll('button, .btn').length,
          hasServiceWorker: 'serviceWorker' in navigator,
          viewport: {
            width: window.innerWidth,
            height: window.innerHeight
          },
          bodySize: {
            width: document.body.scrollWidth,
            height: document.body.scrollHeight
          }
        };
      });

      // Console ÏóêÎü¨ Ï≤¥ÌÅ¨
      const consoleErrors = [];
      page.on('console', msg => {
        if (msg.type() === 'error') {
          consoleErrors.push(msg.text());
        }
      });

      // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏóêÎü¨ Ï≤¥ÌÅ¨
      const networkErrors = [];
      page.on('response', response => {
        if (response.status() >= 400) {
          networkErrors.push({
            url: response.url(),
            status: response.status()
          });
        }
      });

      this.results.push({
        ...pageInfo,
        pageData,
        consoleErrors: consoleErrors.slice(0, 5), // ÏµúÎåÄ 5Í∞úÎßå
        networkErrors: networkErrors.slice(0, 5),
        timestamp: new Date().toISOString(),
        status: pageData.issues.length === 0 ? 'good' : 'needs-attention'
      });

      console.log(`   - Î∞úÍ≤¨Îêú Î¨∏Ï†ú: ${pageData.issues.length}Í∞ú`);
      if (pageData.issues.length > 0) {
        pageData.issues.forEach(issue => console.log(`     ‚Ä¢ ${issue}`));
      }

    } catch (error) {
      console.error(`‚ùå ${pageInfo.title} Ï≤¥ÌÅ¨ Ïã§Ìå®:`, error.message);
      this.results.push({
        ...pageInfo,
        error: error.message,
        status: 'error'
      });
    } finally {
      await context.close();
    }
  }

  generateQuickReport() {
    const summary = {
      totalPages: PRIORITY_PAGES.length,
      checkedPages: this.results.length,
      goodPages: this.results.filter(r => r.status === 'good').length,
      problemPages: this.results.filter(r => r.status === 'needs-attention').length,
      errorPages: this.results.filter(r => r.status === 'error').length,
      totalIssues: this.results.reduce((sum, r) => sum + (r.pageData?.issues?.length || 0), 0)
    };

    const htmlReport = `
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>doha.kr Îπ†Î•∏ Ï≤¥ÌÅ¨ Î≥¥Í≥†ÏÑú</title>
    <style>
        body { font-family: 'Pretendard', -apple-system, sans-serif; margin: 0; padding: 20px; background: #f8f9fa; }
        .container { max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 12px; box-shadow: 0 2px 12px rgba(0,0,0,0.1); }
        h1 { color: #333; border-bottom: 3px solid #5c5ce0; padding-bottom: 15px; }
        .summary { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin: 20px 0; }
        .stat-card { padding: 15px; border-radius: 8px; text-align: center; color: white; }
        .stat-card.good { background: linear-gradient(135deg, #28a745, #20c997); }
        .stat-card.warning { background: linear-gradient(135deg, #fd7e14, #e83e8c); }
        .stat-card.error { background: linear-gradient(135deg, #dc3545, #6f42c1); }
        .stat-card.info { background: linear-gradient(135deg, #007bff, #6610f2); }
        .stat-number { font-size: 2rem; font-weight: bold; }
        .stat-label { font-size: 0.9rem; margin-top: 5px; }
        .page-result { border: 1px solid #ddd; border-radius: 8px; margin: 15px 0; overflow: hidden; }
        .page-header { padding: 15px; background: #f8f9fa; border-bottom: 1px solid #ddd; }
        .page-header.good { background: #d4edda; border-bottom-color: #c3e6cb; }
        .page-header.warning { background: #fff3cd; border-bottom-color: #ffeaa7; }
        .page-header.error { background: #f8d7da; border-bottom-color: #f5c6cb; }
        .page-title { margin: 0; font-weight: bold; }
        .page-url { color: #666; font-size: 0.9rem; margin: 5px 0 0 0; }
        .page-content { padding: 15px; }
        .issues-list { margin: 10px 0; }
        .issue { margin: 5px 0; padding: 8px 12px; background: #fff5f5; border-left: 4px solid #dc3545; border-radius: 4px; }
        .page-info { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 15px 0; }
        .info-item { background: #f8f9fa; padding: 10px; border-radius: 6px; }
        .info-label { font-weight: bold; color: #555; font-size: 0.9rem; }
        .info-value { color: #333; }
        .screenshots { margin: 15px 0; }
        .screenshot-link { display: inline-block; margin: 5px 10px 5px 0; padding: 8px 16px; background: #5c5ce0; color: white; text-decoration: none; border-radius: 6px; font-size: 0.9rem; }
        .status-good { color: #28a745; font-weight: bold; }
        .status-warning { color: #fd7e14; font-weight: bold; }
        .status-error { color: #dc3545; font-weight: bold; }
        .timestamp { text-align: center; color: #666; margin-top: 30px; font-size: 0.9rem; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ doha.kr ÎùºÏù¥Î∏å ÏÇ¨Ïù¥Ìä∏ Îπ†Î•∏ Ï≤¥ÌÅ¨ Î≥¥Í≥†ÏÑú</h1>
        
        <div class="summary">
            <div class="stat-card good">
                <div class="stat-number">${summary.goodPages}</div>
                <div class="stat-label">Ï†ïÏÉÅ ÌéòÏù¥ÏßÄ</div>
            </div>
            <div class="stat-card warning">
                <div class="stat-number">${summary.problemPages}</div>
                <div class="stat-label">Ï£ºÏùò ÌïÑÏöî</div>
            </div>
            <div class="stat-card error">
                <div class="stat-number">${summary.errorPages}</div>
                <div class="stat-label">Ïò§Î•ò ÌéòÏù¥ÏßÄ</div>
            </div>
            <div class="stat-card info">
                <div class="stat-number">${summary.totalIssues}</div>
                <div class="stat-label">Ï¥ù Î∞úÍ≤¨ Î¨∏Ï†ú</div>
            </div>
        </div>

        <h2>üìã ÌéòÏù¥ÏßÄÎ≥Ñ Ï≤¥ÌÅ¨ Í≤∞Í≥º</h2>
        ${this.results.map(result => `
            <div class="page-result">
                <div class="page-header ${result.status}">
                    <h3 class="page-title">
                        ${result.title} 
                        <span class="status-${result.status}">
                            ${result.status === 'good' ? '‚úì Ï†ïÏÉÅ' : 
                              result.status === 'needs-attention' ? '‚ö† Ï£ºÏùò' : '‚ùå Ïò§Î•ò'}
                        </span>
                    </h3>
                    <p class="page-url">${result.url}</p>
                </div>
                
                <div class="page-content">
                    <div class="screenshots">
                        <a href="screenshots/${result.name}-desktop.png" class="screenshot-link" target="_blank">üñ•Ô∏è Îç∞Ïä§ÌÅ¨ÌÜ±</a>
                        <a href="screenshots/${result.name}-mobile.png" class="screenshot-link" target="_blank">üì± Î™®Î∞îÏùº</a>
                    </div>
                    
                    ${result.pageData ? `
                        <div class="page-info">
                            <div class="info-item">
                                <div class="info-label">H1 Ï†úÎ™©</div>
                                <div class="info-value">${result.pageData.h1Text || 'ÏóÜÏùå'}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">Ïù¥ÎØ∏ÏßÄ</div>
                                <div class="info-value">${result.pageData.imageCount}Í∞ú</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">ÎßÅÌÅ¨</div>
                                <div class="info-value">${result.pageData.linkCount}Í∞ú</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">Î≤ÑÌäº</div>
                                <div class="info-value">${result.pageData.buttonCount}Í∞ú</div>
                            </div>
                        </div>
                        
                        ${result.pageData.issues.length > 0 ? `
                            <div class="issues-list">
                                <strong>Î∞úÍ≤¨Îêú Î¨∏Ï†úÏ†ê:</strong>
                                ${result.pageData.issues.map(issue => `<div class="issue">${issue}</div>`).join('')}
                            </div>
                        ` : '<div style="color: #28a745; font-weight: bold;">‚úÖ Î∞úÍ≤¨Îêú Î¨∏Ï†úÏ†ê ÏóÜÏùå</div>'}
                    ` : `<div class="issue">ÌéòÏù¥ÏßÄ Î°úÎî© Ïã§Ìå®: ${result.error}</div>`}
                </div>
            </div>
        `).join('')}

        <div class="timestamp">
            Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏãúÍ∞Ñ: ${new Date().toLocaleString('ko-KR')}
        </div>
    </div>
</body>
</html>`;

    fs.writeFileSync(path.join(this.reportDir, 'quick-check-report.html'), htmlReport);
    
    console.log('\nüìä Îπ†Î•∏ Ï≤¥ÌÅ¨ Í≤∞Í≥º ÏöîÏïΩ:');
    console.log(`‚úÖ Ï†ïÏÉÅ ÌéòÏù¥ÏßÄ: ${summary.goodPages}Í∞ú`);
    console.log(`‚ö†Ô∏è  Ï£ºÏùò ÌïÑÏöî: ${summary.problemPages}Í∞ú`);
    console.log(`‚ùå Ïò§Î•ò ÌéòÏù¥ÏßÄ: ${summary.errorPages}Í∞ú`);
    console.log(`üîç Ï¥ù Î∞úÍ≤¨Îêú Î¨∏Ï†ú: ${summary.totalIssues}Í∞ú`);
  }
}

async function main() {
  const checker = new QuickLiveSiteChecker();
  await checker.checkSite();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = QuickLiveSiteChecker;