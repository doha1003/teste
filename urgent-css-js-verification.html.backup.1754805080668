<!DOCTYPE html>
<html lang="ko">
<head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>doha.kr CSS/JS 긴급 검증</title> <style> body { font-family: 'Pretendard', sans-serif; padding: 20px; background: #f5f5f5; } .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; } .test-section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 4px; } .success { background: #d4edda; border-color: #c3e6cb; color: #155724; } .error { background: #f8d7da; border-color: #f1c2c7; color: #721c24; } .loading { background: #fff3cd; border-color: #ffeaa7; color: #856404; } code { background: #f8f9fa; padding: 2px 6px; border-radius: 3px; font-family: monospace; } </style>
</head>
<body> <div class="container"> <h1>🚨 doha.kr CSS/JS 번들 참조 시스템 긴급 검증</h1> <div class="test-dh-l-section dh-u-loading" id="css-test"> <h3>📁 CSS 파일 로딩 테스트</h3> <p>상태: <span id="css-status">검증 중...</span></p> <div id="css-details"></div> </div> <div class="test-dh-l-section dh-u-loading" id="js-test"> <h3>📁 JavaScript 모듈 로딩 테스트</h3> <p>상태: <span id="js-status">검증 중...</span></p> <div id="js-details"></div> </div> <div class="test-dh-l-section dh-u-loading" id="network-test"> <h3>🌐 네트워크 요청 테스트</h3> <p>상태: <span id="network-status">검증 중...</span></p> <div id="network-details"></div> </div> <div class="test-dh-l-section dh-u-loading" id="path-test"> <h3>📂 경로 구조 테스트</h3> <p>상태: <span id="path-status">검증 중...</span></p> <div id="path-details"></div> </div> <div class="test-dh-l-section" id="recommendations"> <h3>💡 즉시 해결 방안</h3> <div id="recommendation-list"></div> </div> </div> <script> // CSS 로딩 테스트 function testCSS() { const cssTest = document.getElementById('css-test'); const cssStatus = document.getElementById('css-status'); const cssDetails = document.getElementById('css-details'); const testPaths = [ '/dist/styles.min.css', '/dist/styles.css', '/css/main.css' ]; let results = []; let completed = 0; testPaths.forEach(path => { fetch(path, { method: 'HEAD' }) .then(response => { results.push({ path: path, status: response.status, success: response.ok }); }) .catch(error => { results.push({ path: path, status: 'ERROR', success: false, error: error.message }); }) .finally(() => { completed++; if (completed === testPaths.length) { displayCSSResults(results, cssTest, cssStatus, cssDetails); } }); }); } function displayCSSResults(results, container, status, details) { const hasSuccess = results.some(r => r.success); if (hasSuccess) { container.className = 'test-dh-l-section success'; status.textContent = '✅ 정상 - CSS 파일 로딩 가능'; } else { container.className = 'test-dh-l-section error'; status.textContent = '❌ 오류 - CSS 파일 로딩 실패'; } let html = '<ul>'; results.forEach(result => { const icon = result.success ? '✅' : '❌'; html += `<li>${icon} <code>${result.path}</code> - 상태: ${result.status}</li>`; }); html += '</ul>'; details.innerHTML = html; } // JavaScript 모듈 테스트 async function testJS() { const jsTest = document.getElementById('js-test'); const jsStatus = document.getElementById('js-status'); const jsDetails = document.getElementById('js-details'); const testModules = [ '/js/core/service-base.js', '/js/app.js', '/js/core/common-init.js', '/dist/js/core/service-base.js' ]; let results = []; for (const modulePath of testModules) { try { const response = await fetch(modulePath, { method: 'HEAD' }); results.push({ path: modulePath, status: response.status, success: response.ok }); } catch (error) { results.push({ path: modulePath, status: 'ERROR', success: false, error: error.message }); } } displayJSResults(results, jsTest, jsStatus, jsDetails); } function displayJSResults(results, container, status, details) { const hasSuccess = results.some(r => r.success); if (hasSuccess) { container.className = 'test-dh-l-section success'; status.textContent = '✅ 정상 - JavaScript 모듈 로딩 가능'; } else { container.className = 'test-dh-l-section error'; status.textContent = '❌ 오류 - JavaScript 모듈 로딩 실패'; } let html = '<ul>'; results.forEach(result => { const icon = result.success ? '✅' : '❌'; html += `<li>${icon} <code>${result.path}</code> - 상태: ${result.status}</li>`; }); html += '</ul>'; details.innerHTML = html; } // 네트워크 테스트 function testNetwork() { const networkTest = document.getElementById('network-test'); const networkStatus = document.getElementById('network-status'); const networkDetails = document.getElementById('network-details'); const currentUrl = window.location.href; const baseUrl = window.location.origin; networkTest.className = 'test-dh-l-section success'; networkStatus.textContent = '✅ 네트워크 연결 정상'; networkDetails.innerHTML = ` <ul> <li>현재 URL: <code>${currentUrl}</code></li> <li>Base URL: <code>${baseUrl}</code></li> <li>프로토콜: <code>${window.location.protocol}</code></li> <li>호스트: <code>${window.location.host}</code></li> </ul> `; } // 경로 구조 테스트 function testPaths() { const pathTest = document.getElementById('path-test'); const pathStatus = document.getElementById('path-status'); const pathDetails = document.getElementById('path-details'); const currentPath = window.location.pathname; const depth = currentPath.split('/').length - 1; let relativePath = ''; if (depth > 1) { relativePath = '../'.repeat(depth - 1); } pathTest.className = 'test-dh-l-section success'; pathStatus.textContent = '✅ 경로 구조 분석 완료'; pathDetails.innerHTML = ` <ul> <li>현재 경로: <code>${currentPath}</code></li> <li>경로 깊이: ${depth} 단계</li> <li>상대 경로 접두사: <code>${relativePath || './'}</code></li> <li>권장 CSS 경로: <code>${relativePath}dist/styles.min.css</code></li> <li>권장 JS 경로: <code>${relativePath}js/app.js</code></li> </ul> `; } // 해결 방안 제시 function showRecommendations() { const recommendations = document.getElementById('recommendation-list'); recommendations.innerHTML = ` <h4>🔧 즉시 실행 가능한 해결 방법:</h4> <ol> <li><strong>브라우저 캐시 클리어:</strong> <code>Ctrl+Shift+R</code> (하드 리프레시)</li> <li><strong>개발자 도구 확인:</strong> F12 → Console/Network 탭에서 실제 404 오류 확인</li> <li><strong>로컬 서버 재시작:</strong> <br><code>python -m http.server 3000</code> <br>또는 <code>npm run dev</code> </li> <li><strong>파일 존재 확인:</strong> <br>- dist/styles.min.css (389KB) <br>- js/core/service-base.js <br>- js/app.js </li> </ol> <h4>🚨 실제 404 오류 발생 시:</h4> <ol> <li><strong>CSS 폴백 적용:</strong> 개별 CSS 파일 직접 로딩</li> <li><strong>JavaScript 모듈 검증:</strong> 모든 import 경로 확인</li> <li><strong>HTML 참조 경로 수정:</strong> 절대 경로/상대 경로 통일</li> </ol> `; } // 모든 테스트 실행 async function runAllTests() { testCSS(); await testJS(); testNetwork(); testPaths(); showRecommendations(); } // 페이지 로드 시 테스트 실행 document.addEventListener('DOMContentLoaded', runAllTests); </script>
</body>
</html>