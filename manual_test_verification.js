const { chromium } = require('playwright');
const fs = require('fs');

// Ïã§Ï†ú ÏõπÏÇ¨Ïù¥Ìä∏ÏóêÏÑú ÏàòÎèôÏúºÎ°ú Î™®Îì† Í∏∞Îä•ÏùÑ ÏôÑÏ†ÑÌûà ÌÖåÏä§Ìä∏
async function manualTestVerification() {
    console.log('üîç Ïã§Ï†ú ÏõπÏÇ¨Ïù¥Ìä∏ ÏàòÎèô ÏôÑÏ†Ñ ÌÖåÏä§Ìä∏ ÏãúÏûë...\n');
    
    const browser = await chromium.launch({ 
        headless: false,
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
        slowMo: 2000 // Ï≤úÏ≤úÌûà Ïã§ÌñâÌï¥ÏÑú Ï†ïÌôïÌûà ÌôïÏù∏
    });
    
    const context = await browser.newContext();
    const page = await context.newPage();
    
    const results = {};
    
    // ÏΩòÏÜî ÏóêÎü¨ Î™®ÎãàÌÑ∞ÎßÅ
    const consoleErrors = [];
    page.on('console', msg => {
        if (msg.type() === 'error') {
            consoleErrors.push(msg.text());
        }
    });

    try {
        // ===== 1. MBTI ÌÖåÏä§Ìä∏ ÏôÑÏ†Ñ ÏàòÎèô ÌÖåÏä§Ìä∏ =====
        console.log('üß† MBTI ÌÖåÏä§Ìä∏ Ïã§Ï†ú ÏàòÎèô ÌÖåÏä§Ìä∏');
        await page.goto('https://doha.kr/tests/mbti/test.html', { waitUntil: 'networkidle' });
        await page.waitForTimeout(3000);
        
        console.log('   ÏãúÏûë ÌôîÎ©¥ ÌôïÏù∏...');
        const mbtiStartButton = await page.locator('.mbti-start-button').isVisible();
        console.log(`   ÏãúÏûë Î≤ÑÌäº Ï°¥Ïû¨: ${mbtiStartButton}`);
        
        if (mbtiStartButton) {
            console.log('   ÏãúÏûë Î≤ÑÌäº ÌÅ¥Î¶≠...');
            await page.click('.mbti-start-button');
            await page.waitForTimeout(3000);
            
            let questionCount = 0;
            let allQuestionsAnswered = true;
            
            // Ïã§Ï†úÎ°ú Î™®Îì† ÏßàÎ¨∏ÏùÑ ÎãµÎ≥ÄÌïòÎ©¥ÏÑú Í∞úÏàò ÏÑ∏Í∏∞
            console.log('   ÏßàÎ¨∏ ÎãµÎ≥Ä ÏãúÏûë...');
            while (true) {
                try {
                    // ÌòÑÏû¨ ÏßàÎ¨∏Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
                    const questionVisible = await page.locator('#question').isVisible();
                    if (!questionVisible) break;
                    
                    questionCount++;
                    const questionText = await page.locator('#question').textContent();
                    console.log(`   ÏßàÎ¨∏ ${questionCount}: ${questionText.substring(0, 30)}...`);
                    
                    // ÏòµÏÖòÎì§ ÌôïÏù∏
                    const options = await page.locator('.mbti-option').count();
                    console.log(`     ÏòµÏÖò Í∞úÏàò: ${options}Í∞ú`);
                    
                    if (options > 0) {
                        // Ï≤´ Î≤àÏß∏ ÏòµÏÖò ÏÑ†ÌÉù
                        await page.click('.mbti-option:first-child');
                        await page.waitForTimeout(1000);
                        
                        // Îã§Ïùå Î≤ÑÌäº ÏÉÅÌÉú ÌôïÏù∏
                        const nextBtnDisabled = await page.locator('#next-btn').getAttribute('disabled');
                        console.log(`     Îã§Ïùå Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî: ${nextBtnDisabled !== null}`);
                        
                        if (nextBtnDisabled === null) {
                            // Îã§Ïùå Î≤ÑÌäº ÌÅ¥Î¶≠ Í∞ÄÎä•
                            await page.click('#next-btn');
                            await page.waitForTimeout(2000);
                        } else {
                            // ÎßàÏßÄÎßâ ÏßàÎ¨∏
                            console.log('     ÎßàÏßÄÎßâ ÏßàÎ¨∏ ÎèÑÎã¨');
                            break;
                        }
                    } else {
                        console.log('     ÏòµÏÖòÏù¥ ÏóÜÏùå - ÏßàÎ¨∏ Ï¢ÖÎ£å');
                        allQuestionsAnswered = false;
                        break;
                    }
                    
                    // Î¨¥ÌïúÎ£®ÌîÑ Î∞©ÏßÄ (ÏµúÎåÄ 50Í∞ú ÏßàÎ¨∏)
                    if (questionCount >= 50) {
                        console.log('     ÏßàÎ¨∏Ïù¥ ÎÑàÎ¨¥ ÎßéÏùå - Í∞ïÏ†ú Ï¢ÖÎ£å');
                        allQuestionsAnswered = false;
                        break;
                    }
                    
                } catch (error) {
                    console.log(`     ÏßàÎ¨∏ ${questionCount} Ï≤òÎ¶¨ Ï§ë ÏóêÎü¨: ${error.message}`);
                    allQuestionsAnswered = false;
                    break;
                }
            }
            
            console.log('   Í≤∞Í≥º ÌôîÎ©¥ ÎåÄÍ∏∞...');
            await page.waitForTimeout(5000);
            
            // Í≤∞Í≥º ÌôïÏù∏
            const resultVisible = await page.locator('#result-screen').isVisible();
            let mbtiType = '';
            let description = '';
            let shareButtons = 0;
            
            if (resultVisible) {
                mbtiType = await page.locator('#result-type').textContent().catch(() => '');
                description = await page.locator('#result-description').textContent().catch(() => '');
                shareButtons = await page.locator('.mbti-share-btn').count();
                
                console.log(`   Í≤∞Í≥º Ïú†Ìòï: ${mbtiType}`);
                console.log(`   ÏÑ§Î™Ö Í∏∏Ïù¥: ${description.length}Ïûê`);
                console.log(`   Í≥µÏú† Î≤ÑÌäº: ${shareButtons}Í∞ú`);
            }
            
            results.mbti = {
                startButtonExists: mbtiStartButton,
                totalQuestions: questionCount,
                allQuestionsAnswered: allQuestionsAnswered,
                resultDisplayed: resultVisible,
                mbtiType: mbtiType.trim(),
                descriptionLength: description.length,
                shareButtonsCount: shareButtons,
                consoleErrors: consoleErrors.length,
                status: resultVisible && mbtiType && description.length > 100 ? '‚úÖ ÏôÑÏ†Ñ ÏÑ±Í≥µ' : '‚ùå Ïã§Ìå®'
            };
        }
        
        // ===== 2. ÌÖåÌÜ†-ÏóêÍ≤ê ÌÖåÏä§Ìä∏ ÏôÑÏ†Ñ ÏàòÎèô ÌÖåÏä§Ìä∏ =====
        console.log('\nü¶ã ÌÖåÌÜ†-ÏóêÍ≤ê ÌÖåÏä§Ìä∏ Ïã§Ï†ú ÏàòÎèô ÌÖåÏä§Ìä∏');
        await page.goto('https://doha.kr/tests/teto-egen/test.html', { waitUntil: 'networkidle' });
        await page.waitForTimeout(3000);
        
        // ÏÑ±Î≥Ñ ÏÑ†ÌÉù Îã®Í≥Ñ ÌôïÏù∏
        const genderButtons = await page.locator('.teto-gender-btn').count();
        console.log(`   ÏÑ±Î≥Ñ ÏÑ†ÌÉù Î≤ÑÌäº: ${genderButtons}Í∞ú`);
        
        if (genderButtons > 0) {
            console.log('   ÏÑ±Î≥Ñ ÏÑ†ÌÉù (ÎÇ®ÏÑ±)...');
            await page.click('.teto-gender-btn:first-child');
            await page.waitForTimeout(2000);
            
            // ÌÖåÏä§Ìä∏ ÏãúÏûë Î≤ÑÌäº ÌôïÏù∏
            const tetoStartButton = await page.locator('.teto-start-button').isVisible();
            console.log(`   ÌÖåÏä§Ìä∏ ÏãúÏûë Î≤ÑÌäº Ï°¥Ïû¨: ${tetoStartButton}`);
            
            if (tetoStartButton) {
                await page.click('.teto-start-button');
                await page.waitForTimeout(3000);
                
                let tetoQuestionCount = 0;
                let tetoAllAnswered = true;
                
                console.log('   ÌÖåÌÜ†-ÏóêÍ≤ê ÏßàÎ¨∏ ÎãµÎ≥Ä ÏãúÏûë...');
                while (true) {
                    try {
                        const questionVisible = await page.locator('#question').isVisible();
                        if (!questionVisible) break;
                        
                        tetoQuestionCount++;
                        const questionText = await page.locator('#question').textContent();
                        console.log(`   ÏßàÎ¨∏ ${tetoQuestionCount}: ${questionText.substring(0, 30)}...`);
                        
                        const options = await page.locator('.teto-option').count();
                        console.log(`     ÏòµÏÖò Í∞úÏàò: ${options}Í∞ú`);
                        
                        if (options > 0) {
                            await page.click('.teto-option:first-child');
                            await page.waitForTimeout(1000);
                            
                            const nextBtnDisabled = await page.locator('#next-btn').getAttribute('disabled');
                            if (nextBtnDisabled === null) {
                                await page.click('#next-btn');
                                await page.waitForTimeout(2000);
                            } else {
                                console.log('     ÌÖåÌÜ†-ÏóêÍ≤ê ÎßàÏßÄÎßâ ÏßàÎ¨∏ ÎèÑÎã¨');
                                break;
                            }
                        } else {
                            tetoAllAnswered = false;
                            break;
                        }
                        
                        if (tetoQuestionCount >= 20) {
                            tetoAllAnswered = false;
                            break;
                        }
                        
                    } catch (error) {
                        console.log(`     ÌÖåÌÜ† ÏßàÎ¨∏ ${tetoQuestionCount} ÏóêÎü¨: ${error.message}`);
                        tetoAllAnswered = false;
                        break;
                    }
                }
                
                console.log('   ÌÖåÌÜ†-ÏóêÍ≤ê Í≤∞Í≥º ÌôîÎ©¥ ÎåÄÍ∏∞...');
                await page.waitForTimeout(5000);
                
                const tetoResultVisible = await page.locator('#result-screen').isVisible();
                let tetoType = '';
                if (tetoResultVisible) {
                    tetoType = await page.locator('#result-type').textContent().catch(() => '');
                    console.log(`   ÌÖåÌÜ†-ÏóêÍ≤ê Í≤∞Í≥º: ${tetoType}`);
                }
                
                results.tetoEgen = {
                    genderSelectionExists: genderButtons > 0,
                    startButtonExists: tetoStartButton,
                    totalQuestions: tetoQuestionCount,
                    allQuestionsAnswered: tetoAllAnswered,
                    resultDisplayed: tetoResultVisible,
                    tetoType: tetoType.trim(),
                    status: tetoResultVisible && tetoType ? '‚úÖ ÏôÑÏ†Ñ ÏÑ±Í≥µ' : '‚ùå Ïã§Ìå®'
                };
            }
        }
        
        // ===== 3. Îü¨Î∏å DNA ÌÖåÏä§Ìä∏ ÏôÑÏ†Ñ ÏàòÎèô ÌÖåÏä§Ìä∏ =====
        console.log('\nüíñ Îü¨Î∏å DNA ÌÖåÏä§Ìä∏ Ïã§Ï†ú ÏàòÎèô ÌÖåÏä§Ìä∏');
        await page.goto('https://doha.kr/tests/love-dna/test.html', { waitUntil: 'networkidle' });
        await page.waitForTimeout(3000);
        
        const loveStartButton = await page.locator('.love-start-button').isVisible();
        console.log(`   Îü¨Î∏å DNA ÏãúÏûë Î≤ÑÌäº Ï°¥Ïû¨: ${loveStartButton}`);
        
        if (loveStartButton) {
            await page.click('.love-start-button');
            await page.waitForTimeout(3000);
            
            let loveQuestionCount = 0;
            let loveAllAnswered = true;
            
            console.log('   Îü¨Î∏å DNA ÏßàÎ¨∏ ÎãµÎ≥Ä ÏãúÏûë...');
            while (true) {
                try {
                    const questionVisible = await page.locator('#question').isVisible();
                    if (!questionVisible) break;
                    
                    loveQuestionCount++;
                    const questionText = await page.locator('#question').textContent();
                    console.log(`   ÏßàÎ¨∏ ${loveQuestionCount}: ${questionText.substring(0, 30)}...`);
                    
                    const options = await page.locator('.love-option').count();
                    console.log(`     ÏòµÏÖò Í∞úÏàò: ${options}Í∞ú`);
                    
                    if (options > 0) {
                        await page.click('.love-option:first-child');
                        await page.waitForTimeout(1000);
                        
                        const nextBtnDisabled = await page.locator('#next-btn').getAttribute('disabled');
                        if (nextBtnDisabled === null) {
                            await page.click('#next-btn');
                            await page.waitForTimeout(2000);
                        } else {
                            console.log('     Îü¨Î∏å DNA ÎßàÏßÄÎßâ ÏßàÎ¨∏ ÎèÑÎã¨');
                            break;
                        }
                    } else {
                        loveAllAnswered = false;
                        break;
                    }
                    
                    if (loveQuestionCount >= 50) {
                        loveAllAnswered = false;
                        break;
                    }
                    
                } catch (error) {
                    console.log(`     Îü¨Î∏å ÏßàÎ¨∏ ${loveQuestionCount} ÏóêÎü¨: ${error.message}`);
                    loveAllAnswered = false;
                    break;
                }
            }
            
            console.log('   Îü¨Î∏å DNA Í≤∞Í≥º ÌôîÎ©¥ ÎåÄÍ∏∞...');
            await page.waitForTimeout(5000);
            
            const loveResultVisible = await page.locator('#result-screen').isVisible();
            let loveDNAType = '';
            if (loveResultVisible) {
                loveDNAType = await page.locator('#result-dna').textContent().catch(() => '');
                console.log(`   Îü¨Î∏å DNA Í≤∞Í≥º: ${loveDNAType}`);
            }
            
            results.loveDNA = {
                startButtonExists: loveStartButton,
                totalQuestions: loveQuestionCount,
                allQuestionsAnswered: loveAllAnswered,
                resultDisplayed: loveResultVisible,
                loveDNAType: loveDNAType.trim(),
                status: loveResultVisible && loveDNAType ? '‚úÖ ÏôÑÏ†Ñ ÏÑ±Í≥µ' : '‚ùå Ïã§Ìå®'
            };
        }
        
        // Í≤∞Í≥ºÎ•º ÌååÏùºÎ°ú Ï†ÄÏû•
        const timestamp = new Date().toISOString().replace(/:/g, '-');
        const reportData = {
            timestamp: timestamp,
            consoleErrorsTotal: consoleErrors.length,
            consoleErrors: consoleErrors,
            results: results
        };
        
        fs.writeFileSync(`manual_test_report_${timestamp}.json`, JSON.stringify(reportData, null, 2));
        
    } catch (error) {
        console.error('ÏàòÎèô ÌÖåÏä§Ìä∏ Ï§ë Ïò§Î•ò:', error);
    }
    
    await browser.close();
    
    // Í≤∞Í≥º Ï∂úÎ†•
    console.log('\nüìä Ïã§Ï†ú ÏàòÎèô ÌÖåÏä§Ìä∏ Í≤∞Í≥º');
    console.log('‚ïê'.repeat(60));
    
    Object.keys(results).forEach(testName => {
        const result = results[testName];
        console.log(`\n${testName.toUpperCase()} ${result.status}`);
        console.log(`  ÏßàÎ¨∏ Ïàò: ${result.totalQuestions}Í∞ú`);
        console.log(`  Î™®Îì† ÏßàÎ¨∏ ÎãµÎ≥Ä: ${result.allQuestionsAnswered ? '‚úÖ' : '‚ùå'}`);
        console.log(`  Í≤∞Í≥º ÌëúÏãú: ${result.resultDisplayed ? '‚úÖ' : '‚ùå'}`);
        if (result.mbtiType) console.log(`  Í≤∞Í≥º Ïú†Ìòï: ${result.mbtiType}`);
        if (result.tetoType) console.log(`  Í≤∞Í≥º Ïú†Ìòï: ${result.tetoType}`);
        if (result.loveDNAType) console.log(`  Í≤∞Í≥º Ïú†Ìòï: ${result.loveDNAType}`);
    });
    
    console.log(`\nÏ¥ù ÏΩòÏÜî ÏóêÎü¨: ${consoleErrors.length}Í∞ú`);
    if (consoleErrors.length > 0) {
        console.log('ÏóêÎü¨ Î™©Î°ù:');
        consoleErrors.forEach((error, index) => {
            console.log(`  ${index + 1}. ${error}`);
        });
    }
    
    console.log('\nüéâ Ïã§Ï†ú ÏàòÎèô ÌÖåÏä§Ìä∏ ÏôÑÎ£å!');
    console.log('üìÑ ÏÉÅÏÑ∏ Í≤∞Í≥ºÎäî manual_test_report_*.json ÌååÏùºÏóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.');
    
    return results;
}

manualTestVerification().catch(console.error);