/**
 * Validate all JavaScript files and fix common syntax errors
 */

const fs = require('fs');
const path = require('path');
const vm = require('vm');

const filesWithErrors = [];
const fixedFiles = [];

console.log('üîç Î™®Îì† JavaScript ÌååÏùº Í≤ÄÏ¶ù ÏãúÏûë...\n');

// Function to validate JavaScript syntax
function validateJavaScript(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    
    // Try to create a script to validate syntax
    try {
      new vm.Script(content, { filename: filePath });
      return { valid: true };
    } catch (error) {
      return { 
        valid: false, 
        error: error.message,
        line: error.stack.match(/:(\d+):/) ? error.stack.match(/:(\d+):/)[1] : null
      };
    }
  } catch (error) {
    return { valid: false, error: `File read error: ${error.message}` };
  }
}

// Function to fix common JavaScript errors
function fixCommonErrors(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    
    // Count braces
    const openBraces = (content.match(/{/g) || []).length;
    const closeBraces = (content.match(/}/g) || []).length;
    
    if (openBraces < closeBraces) {
      // Too many closing braces
      console.log(`  ‚Üí Ï§ëÍ¥ÑÌò∏ Î∂àÍ∑†Ìòï Í∞êÏßÄ: Îã´Îäî Ï§ëÍ¥ÑÌò∏Í∞Ä ${closeBraces - openBraces}Í∞ú Îçî ÎßéÏùå`);
      
      // Remove extra closing braces at the end of file
      const lines = content.split('\n');
      for (let i = lines.length - 1; i >= 0; i--) {
        if (lines[i].trim() === '}' && closeBraces > openBraces) {
          lines.splice(i, 1);
          closeBraces--;
          modified = true;
          if (closeBraces === openBraces) break;
        }
      }
      
      if (modified) {
        content = lines.join('\n');
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`  ‚Üí Î∂àÌïÑÏöîÌïú Ï§ëÍ¥ÑÌò∏ Ï†úÍ±∞Îê®`);
        return true;
      }
    }
    
    // Fix other common issues
    const originalContent = content;
    
    // Fix window.adsbygoogle assignment
    content = content.replace(
      /(\s*)\(window\.adsbygoogle\s*=\s*window\.adsbygoogle\s*\|\|\s*\[\];\)\.push/g,
      '$1(window.adsbygoogle = window.adsbygoogle || []).push'
    );
    
    // Fix destructuring in fortune-daily.js
    if (filePath.includes('fortune-daily.js')) {
      content = content.replace(
        /const year = parts\[0\];\s*const month = parts\[1\];\s*const day = parts\[2\];/g,
        'const [year, month, day] = parts;'
      );
    }
    
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`  ‚Üí ÏùºÎ∞òÏ†ÅÏù∏ Íµ¨Î¨∏ Ïò§Î•ò ÏàòÏ†ïÎê®`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`  ‚ùå ÏàòÏ†ï Ïã§Ìå®: ${error.message}`);
    return false;
  }
}

// Recursively check all JS files
function checkDirectory(dir) {
  const files = fs.readdirSync(dir);
  
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules' && file !== 'dist') {
      checkDirectory(filePath);
    } else if (file.endsWith('.js') && !file.endsWith('.min.js')) {
      const relativePath = path.relative(process.cwd(), filePath);
      const result = validateJavaScript(filePath);
      
      if (!result.valid) {
        console.log(`\n‚ùå Ïò§Î•ò Î∞úÍ≤¨: ${relativePath}`);
        console.log(`   ${result.error}`);
        filesWithErrors.push({ path: relativePath, error: result.error });
        
        // Try to fix the error
        console.log(`   ÏàòÏ†ï ÏãúÎèÑ Ï§ë...`);
        if (fixCommonErrors(filePath)) {
          // Re-validate after fix
          const revalidate = validateJavaScript(filePath);
          if (revalidate.valid) {
            console.log(`   ‚úÖ ÏàòÏ†ï ÏôÑÎ£å!`);
            fixedFiles.push(relativePath);
            // Remove from errors list
            filesWithErrors.pop();
          } else {
            console.log(`   ‚ö†Ô∏è  Ïó¨Ï†ÑÌûà Ïò§Î•ò Ï°¥Ïû¨: ${revalidate.error}`);
          }
        }
      }
    }
  });
}

// Start checking from js directory
if (fs.existsSync('js')) {
  checkDirectory('js');
}

// Summary
console.log('\n' + '='.repeat(60));
console.log('üìä Í≤ÄÏ¶ù Í≤∞Í≥º ÏöîÏïΩ\n');

if (fixedFiles.length > 0) {
  console.log(`‚úÖ ÏàòÏ†ïÎêú ÌååÏùº (${fixedFiles.length}Í∞ú):`);
  fixedFiles.forEach(file => console.log(`   - ${file}`));
  console.log('');
}

if (filesWithErrors.length > 0) {
  console.log(`‚ùå Ïó¨Ï†ÑÌûà Ïò§Î•òÍ∞Ä ÏûàÎäî ÌååÏùº (${filesWithErrors.length}Í∞ú):`);
  filesWithErrors.forEach(({ path, error }) => {
    console.log(`\n   ${path}:`);
    console.log(`   ${error.substring(0, 100)}...`);
  });
  
  console.log('\nüí° Í∂åÏû•ÏÇ¨Ìï≠:');
  console.log('1. ÏúÑ ÌååÏùºÎì§ÏùÑ ÏàòÎèôÏúºÎ°ú Í≤ÄÌÜ†ÌïòÏÑ∏Ïöî');
  console.log('2. Ï§ëÍ¥ÑÌò∏ Í∑†ÌòïÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî');
  console.log('3. ÏÑ∏ÎØ∏ÏΩúÎ°†Í≥º Íµ¨Î¨∏ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî');
} else {
  console.log('‚ú® Î™®Îì† JavaScript ÌååÏùºÏù¥ Ïú†Ìö®Ìï©ÎãàÎã§!');
}

// Special check for specific error files
console.log('\nüîß ÌäπÏ†ï Ïò§Î•ò ÌååÏùº ÏßëÏ§ë ÏàòÏ†ï...\n');

const specificFiles = [
  'js/features/fortune/zodiac-fortune.js',
  'js/features/tests/love-dna-test.js', 
  'js/features/tests/mbti-test.js',
  'js/features/tests/teto-egen-test.js',
  'js/utils/logger.js'
];

specificFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`Í≤ÄÏÇ¨ Ï§ë: ${file}`);
    const result = validateJavaScript(file);
    if (!result.valid) {
      console.log(`  Ïò§Î•ò: ${result.error}`);
      
      // Read the file and show context around the error
      if (result.line) {
        const content = fs.readFileSync(file, 'utf8');
        const lines = content.split('\n');
        const errorLine = parseInt(result.line) - 1;
        
        console.log(`\n  Î¨∏Ï†ú Î∂ÄÎ∂Ñ (ÎùºÏù∏ ${result.line} Ï£ºÎ≥Ä):`);
        for (let i = Math.max(0, errorLine - 2); i <= Math.min(lines.length - 1, errorLine + 2); i++) {
          const marker = i === errorLine ? ' ‚Üí ' : '   ';
          console.log(`  ${marker}${i + 1}: ${lines[i]}`);
        }
      }
    } else {
      console.log(`  ‚úÖ Ïú†Ìö®Ìï®`);
    }
  }
});

console.log('\nÏôÑÎ£å!');